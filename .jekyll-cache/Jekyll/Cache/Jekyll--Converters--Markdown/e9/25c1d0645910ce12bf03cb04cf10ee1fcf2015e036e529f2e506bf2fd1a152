I"<J<p>公司不同服务的不同 log 散落在不同的机器上，管理查看非常困难，于是考虑使用 ELK 来收集管理 log，<code class="highlighter-rouge">Elasicsearch</code> 和 <code class="highlighter-rouge">Kibana</code> 稍微学了下基本用没有什么问题，但是 Logstash 却苦苦 get 不到它的点在哪，于是，在某一个深夜下决心好好去研究下它的使用方法…</p>

<p>本文就详细介绍下 logstash 的用法，文中的例子是使用 logstash 收集 nginx log，然后输出到 elasticsearch 中。</p>

<h2 id="logstash-基本概念">Logstash 基本概念</h2>

<p>先看一张图来说明 Logstash 的数据流向（图中没有介绍 codec 的过程，一般来说，不用 codec 你完全可以使用基本功能来完成大部分工作）：</p>

<p><img src="http://dn-rsscdn.qbox.me/2017-04-08-Logstash-1.png" alt="logstash 数据流向" /></p>

<p>途中虚线框中的部分就是 logstash 做的事情，如果不去了解内部机制 logstash 就像是一个提供了 输入输出接口的黑盒，把我们的各种 log 收集起来（连接到 input 接口），logstash 做一些处理然后发送给连接到 output 接口的输入（可以是 file、stdout、elasticsearch），这个过程被官方定义为 <code class="highlighter-rouge">pipline</code>。下面咱们看一下黑盒的内部结构，目前咱们只介绍三部分：</p>

<ul>
  <li>input</li>
  <li>filter</li>
  <li>output</li>
</ul>

<h2 id="input">input</h2>
<p>所谓输入，就是我们要收集的各种 log，这部分可以是 syslog、file、tcp 甚至是 stdin。</p>

<p>我们想收集的是 nginx 的 log，一般 nginx log 我们都重定向到一个 log 文件中，所以，这里 input 我们选择 file。</p>

<p>完整的 input list 请参考：<a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html">Logstash Input Plugin</a>。</p>

<p>在配置文件中可以这么配置 input：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input {
    file {
        path =&gt; ["/var/log/nginx/api_access_log"]
        type =&gt; "dataapi"
        start_position =&gt; "beginning"
    }

    file {
        path =&gt; ["/var/log/nginx/internal_api_access_log"]
        type =&gt; "internalapi"
        start_position =&gt; "beginning"
    }
}
</code></pre></div></div>

<p>可以看到是支持多个文件的，可以根据不同的 type 来区分不同的文件。</p>

<h2 id="filter">filter</h2>
<p>因为我们要处理不同服务的不同 log 然后统一输出到一个地方，不同服务的 log 的存储格式是不一样的，所以不同的 log 需要统一处理，格式化为一种标准的格式（比如 json）然后再统一输出。这个转化就需要我们定义 filter 来完成。</p>

<p>常用 filter 有 grok、kv、date 等，完整的 filter 列表请参考：<a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html">Logstash Filter Plugin</a>。</p>

<p>下面介绍几个常见的 filter：</p>

<h4 id="-grok这也是我当时始终不能理解的部分">* grok（这也是我当时始终不能理解的部分）</h4>
<p>可以理解为 grep，实际就是用正则的方式去匹配我们的不同 log，然后用分组把不同的信息提取出来，看我的例子：</p>

<p>我们的 nginx log format 为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>log_format api '$http_remoteip - - [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"';
</code></pre></div></div>

<blockquote>
  <p>需要说明的一点是，因为我们使用了阿里云的负载均衡，如果用 remote_addr 获取客户端 IP 的到的是负载均衡的 IP，所以我们使用了 remoteip 这个 header 内容，具体获取这个变量的方法就是前面加 <code class="highlighter-rouge">http_</code>，所以是 <code class="highlighter-rouge">http_remoteip</code>。</p>
</blockquote>

<p>具体的格式分析：</p>

<p><img src="http://dn-rsscdn.qbox.me/2017-04-08-nginx-log-1.png" alt="" /></p>

<p>所以到了 access_log 中的日志是这样的：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>218.108.146.138 - - [08/Apr/2017:16:20:19 +0800] "GET /search?_id=20xxx2&amp;_token=test_token&amp;limit=10&amp;q=%E8%88%9E%E8%B1%A1%E4%BA%91&amp;start=0&amp;type=all HTTP/1.0" 200 1094 "http://data.xxxx.com/" "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.110 Safari/537.36"
</code></pre></div></div>

<p>OK，我们只要根据上面的内容写正则表达式就可以了，相信这难不倒大部分程序员，下面我贴出我的：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%{IPORHOST:clientip} - - \[%{HTTPDATE:request_time}\] \"(?:%{WORD:method} %{URIPATH:url}(?:%{URIPARAM:params})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes:int}|-) \"%{DATA:referrer}\" \"%{DATA:agent}\"
</code></pre></div></div>

<p>呃…… 说好的正则呢？为什么是这些啊，好的这也是我当时不解的地方，我解释下这个地方。</p>

<p>观察上面的 log，都是一些 IP、DATE、UA、URL 等等的字符串（有些是数字），抛开 nignx，相信 apache 的访问日志基本上也都会是这些东西，那么问题来了，每次我们接入一个 nginx 服务要写一大堆正则，下次我接入了 apache，同样的东西我可能回重复写一大堆，heh，bad small，要复用对不对，这些 logstash 早就想到了，所以，官方把常用的正则放到了变量里方便我们使用，具体可参考：<a href="https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns">Logstash Grok Patterns</a>。</p>

<p>这时候再看上面提到的匹配字符串，最开始是客户端 IP，logstash 给我们一个变量叫 <code class="highlighter-rouge">IPORHOST</code>，在 pattern 列表中查看定义为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IPORHOST (?:%{HOSTNAME}|%{IP})
</code></pre></div></div>

<p>实际是两个变量的拼接，用到了正则中的 <code class="highlighter-rouge">或</code>：<code class="highlighter-rouge">|</code>，在文档中找提到的两个变量为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IPV6 ((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?
IPV4 (?&lt;![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9])

IP (?:%{IPV6}|%{IPV4})
HOSTNAME \b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)
</code></pre></div></div>

<p>实际就是三个正则：匹配 IPV6、IPV4 和 HOSTNAME，我们只需要引用变量就好，不用自己手写正则，很方便有没有。</p>

<p>grok 表达式（可以叫做 pattern）的语法是这样的:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%{PATTERN_NAME:capture_name:data_type}
</code></pre></div></div>

<ul>
  <li>PATTERN_NAME：上面提到的的正则的变量</li>
  <li>capture_name：要把内容提取到哪个 field 中，可以理解为正则的分组名</li>
  <li>data_type：提取出的内容的数据类型，默认为字符串，常用的还有 <code class="highlighter-rouge">int</code>、<code class="highlighter-rouge">float</code></li>
</ul>

<p>当然了，上面的变量你完全可以选择不实用而使用自己手写的正则比如把某个像 <code class="highlighter-rouge">123.456</code> 这样的值提取到 request_time 则个 field 中)：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(?&lt;request_time&gt;\d+(?:\.\d+)?)
</code></pre></div></div>

<p>那么 grok 怎么配置呢？看下面：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filter {
    grok {
        match =&gt; {
            "message" =&gt; "%{IPORHOST:clientip} - - \[%{HTTPDATE:request_time}\] \"(?:%{WORD:method} %{URIPATH:url}(?:%{URIPARAM:params})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes:int}|-) \"%{DATA:referrer}\" \"%{DATA:agent}\""
        }
    }
}
</code></pre></div></div>

<p>上面就是我的配置文件。那么怎么验证我们的 pattern 对不对呢？有个 <a href="https://grokdebug.herokuapp.com/">logstash pattern debug 工具</a>可以帮助我们。</p>

<p>提取的内容打印出来（在 output 介绍中会介绍怎么打印到屏幕上）是类似这样的：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
          "agent" =&gt; "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/602.4.8 (KHTML, like Gecko) Version/10.0.3 Safari/602.4.8",
         "method" =&gt; "GET",
         "_token" =&gt; "test_token",
        "message" =&gt; "100.97.90.0 - - [02/Apr/2017:22:47:32 +0800] \"GET /project/weibo?_id=25xxx67&amp;_token=test_token&amp;id=K_ITJUZI_PROJECT:29767 HTTP/1.0\" 200 503 \"http://data.fellowplus.com/\" \"Mo
zilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/602.4.8 (KHTML, like Gecko) Version/10.0.3 Safari/602.4.8\"",
         "params" =&gt; "?_id=25xx67&amp;_token=test_token&amp;id=xxxxx",
            "url" =&gt; "/project/weibo",
           "tags" =&gt; [],
           "path" =&gt; "/var/log/nginx/api_access_log",
       "referrer" =&gt; "http://data.xxxx.com/",
     "@timestamp" =&gt; 2017-04-06T03:37:18.215Z,
       "response" =&gt; "200",
          "bytes" =&gt; "503",
       "clientip" =&gt; "100.97.90.0",
       "@version" =&gt; "1",
           "host" =&gt; "iZ232o4s4u6Z",
    "httpversion" =&gt; "1.0",
            "_id" =&gt; "25xxx67",
             "id" =&gt; "xxxxx",
      "request_time" =&gt; "02/Apr/2017:22:47:32 +0800"
}
</code></pre></div></div>

<h4 id="-kv">* kv</h4>

<p>先看一个问题：</p>

<p>可以看到把我们的 URL 和 参数分别提取到了不同的变量中：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "params" =&gt; "?_id=25xx67&amp;_token=test_token&amp;id=xxxxx",
    "url" =&gt; "/project/weibo",
}
</code></pre></div></div>

<p>但是我想做一个用户 ID 的统计，根据 _id 去统计访问量，这时候我们就需要把 _id 提取到一个 field 中，一种方式是修改上面的正则，从 request 中提取，这样的问题是假如后面你不能穷举请求中到底有多少参数，所以 logstash 给了我们另外一个 filter：kv。</p>

<p>kv 看名字就知道是 key-value 的意思，跟我们的参数一样啊，先看代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filter {
   kv {
        source =&gt; "params"
        field_split =&gt; "&amp;"
        trimkey =&gt; "\?"
        prefix =&gt; "arg_"
    }
}
</code></pre></div></div>

<ul>
  <li>source：要处理哪个 field 中的内容</li>
  <li>field_split：字符串要用什么字符拆分，url param 当然要用 &amp; 拆分啊</li>
  <li>trimkey：看上面 params 字符串中是包含 <code class="highlighter-rouge">?</code> 的，这时候会把 _id 的内容提取到 <code class="highlighter-rouge">?_id</code> 中，随意我们需要 trim，后面的字符就是我们要清理的字符，trimkey 是每个 key 都做这样的处理</li>
  <li>prefix：elastic 中 _id 是一个关键字，所以我们不能使用 <code class="highlighter-rouge">\_id</code> 这个 field，那么加个前缀就好了呗，所以 <code class="highlighter-rouge">prefix = 'arg\_'</code> 后，我们的 _id 就变成了 <code class="highlighter-rouge">arg__id</code>，每个 key 都会做这样的处理</li>
</ul>

<h4 id="-date">* date</h4>

<p>再看另外一个问题：</p>

<p>如果把你的提取内容打印出来你会发现有两个变量：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    ...
    "@timestamp" =&gt; 2017-04-06T03:37:18.215Z,
    "request_time" =&gt; "02/Apr/2017:22:47:32 +0800",
    ...
}
</code></pre></div></div>

<p>@timestamp 这个 field 是日期类型，但是是提取时间而不是请求时间，request_time 是请求时间但是是字符串类型，不是 date 类型，elasticsearch 是不能当时间序列来处理的，所以，不对啊老师……</p>

<p>别急，下面介绍另外一个 filter：date，先看配置配置：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filter {
    date {
            match =&gt; [ "request_time" , "dd/MMM/yyyy:HH:mm:ss +0800" ]
            timezone =&gt; "Asia/Shanghai"
    }
}
</code></pre></div></div>

<p>这时，你就会发现 @timestamp 变成了 request_time 的值，而且是 date 类型，而且格式是按我们指定的格式显示的。</p>

<h4 id="-geoip">* geoip</h4>

<p>看配置文件：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filter {
    geoip {
        source =&gt; "clientip"
    }
}
</code></pre></div></div>

<ul>
  <li>source：仍然是我们要处理的 field 名字</li>
</ul>

<p>这个其实就是根据 IP 获取地点的 filter，处理后的结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
       "message" =&gt; "183.60.92.253",
      "@version" =&gt; "1",
    "@timestamp" =&gt; "2014-08-07T10:32:55.610Z",
          "host" =&gt; "raochenlindeMacBook-Air.local",
         "geoip" =&gt; {
                      "ip" =&gt; "183.60.92.253",
           "country_code2" =&gt; "CN",
           "country_code3" =&gt; "CHN",
            "country_name" =&gt; "China",
          "continent_code" =&gt; "AS",
             "region_name" =&gt; "30",
               "city_name" =&gt; "Guangzhou",
                "latitude" =&gt; 23.11670000000001,
               "longitude" =&gt; 113.25,
                "timezone" =&gt; "Asia/Chongqing",
        "real_region_name" =&gt; "Guangdong",
                "location" =&gt; [
            [0] 113.25,
            [1] 23.11670000000001
        ]
    }
}
</code></pre></div></div>

<h3 id="output">output</h3>

<p>终于到输出了，先看配置：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>output {
    stdout {codec =&gt; rubydebug}
    elasticsearch {
        hosts =&gt; ["xxx.xxx.xxx.xxx:9200"]
        index =&gt; "logstash-dataapi"
        document_type =&gt; "%{type}"
        flush_size =&gt; 20000
        idle_flush_time =&gt; 10
    }
}
</code></pre></div></div>

<p>和 input 一样，output 也可以配置多个，上面的配置是打印到屏幕同时输入到 elasticsearch 中。</p>

<p>elasticsearch 中有几个参数需要说明一下：</p>

<ul>
  <li>hosts：就是 elasticsearch 的 host 和 port</li>
  <li>index：要存储的 index</li>
  <li>document_type：还记得 input 中配置的 type 吗？我们配置了两个 log 文件，我们需要让他们都输入到一个 index 中，但是 要靠 _type 来区分，所以，这个地方配置我们的 type 就好了，写成：<code class="highlighter-rouge">%{type}</code></li>
  <li>flush_size： 代表不是每次都去请求 elasticsearch，而是先攒着，攒到配置中的条数然后发送给 elasticsearch</li>
  <li>idle_flush_time：这个是配合上面使用的，如果在这个配置的时间内，没有攒够需要的条数，仍然会向 elasticsearch 发送数据</li>
</ul>

<p>好了，介绍完了，下面贴一下完整的配置文件：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input {
    file {
        path =&gt; ["/var/log/nginx/api_access_log"]
        type =&gt; "dataapi"
        start_position =&gt; "beginning"
    }

    file {
        path =&gt; ["/var/log/nginx/internal_api_access_log"]
        type =&gt; "internalapi"
        start_position =&gt; "beginning"
    }
}

filter {
    grok {
        match =&gt; {
            "message" =&gt; "%{IPORHOST:clientip} - - \[%{HTTPDATE:request_time}\] \"(?:%{WORD:method} %{URIPATH:url}(?:%{URIPARAM:params})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes:int}|-) \"%{DATA:referrer}\" \"%{DATA:agent}\""
        }
    }

    date {
        match =&gt; [ "request_time" , "dd/MMM/yyyy:HH:mm:ss +0800" ]
        timezone =&gt; "Asia/Shanghai"
    }

    kv {
        source =&gt; "params"
        field_split =&gt; "&amp;"
        trimkey =&gt; "\?"
        prefix =&gt; "arg_"
    }

    geoip {
        source =&gt; "clientip"
    }
}

output {
    # stdout {codec =&gt; rubydebug}
    elasticsearch {
        hosts =&gt; ["xxx.xxx.xxx.xxx:9200"]
        index =&gt; "logstash-dataapi"
        document_type =&gt; "%{type}"
        flush_size =&gt; 20000
        idle_flush_time =&gt; 10
    }
}
</code></pre></div></div>

<p>我们的整体分布是这样的：</p>

<p>一般一台机器启动一个 logstash 服务，input 配置不同的 log。</p>

<p><img src="http://dn-rsscdn.qbox.me/2017-04-10-logstash.png" alt="logstash 分布图" /></p>

<p>Enjoy it。</p>

<h2 id="参考">参考</h2>
<ul>
  <li>ELKstack 中文指南：<a href="https://www.gitbook.com/book/chenryn/elk-stack-guide-cn">https://www.gitbook.com/book/chenryn/elk-stack-guide-cn</a></li>
  <li>Logstash Reference：<a href="https://www.elastic.co/guide/en/logstash/current/index.html">https://www.elastic.co/guide/en/logstash/current/index.html</a></li>
  <li>Logstash 正则捕获：<a href="https://github.com/chenryn/logstash-best-practice-cn/blob/master/filter/grok.md">https://github.com/chenryn/logstash-best-practice-cn/blob/master/filter/grok.md</a></li>
</ul>

:ET