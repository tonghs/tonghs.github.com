I"C<p>tag 多用于对代码某一时间点坐标记，或者标记某个 milestone，一般用在上线时，线上重要版本都要打上标签，一来方便查看追踪，二来如果出问题了也方便回滚。</p>

<p>先看用法：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用法：git tag <span class="o">[</span><span class="nt">-a</span>|-s|-u &lt;key-id&gt;] <span class="o">[</span><span class="nt">-f</span><span class="o">]</span> <span class="o">[</span><span class="nt">-m</span> &lt;说明&gt;|-F &lt;文件&gt;] &lt;标签名&gt; <span class="o">[</span>&lt;头&gt;]
  或：git tag <span class="nt">-d</span> &lt;标签名&gt;...
  或：git tag <span class="nt">-l</span> <span class="o">[</span><span class="nt">-n</span><span class="o">[</span>&lt;num&gt;]] <span class="o">[</span><span class="nt">--contains</span> &lt;提交&gt;] <span class="o">[</span><span class="nt">--points-at</span> &lt;对象&gt;]
                <span class="o">[</span>&lt;模式&gt;...]
  或：git tag <span class="nt">-v</span> &lt;标签名&gt;...

    <span class="nt">-l</span>, <span class="nt">--list</span>            列出tag名称
    <span class="nt">-n</span><span class="o">[</span>&lt;n&gt;]               每个 tag 信息打印 &lt;n&gt; 行
    <span class="nt">-d</span>, <span class="nt">--delete</span>          删除 tags
    <span class="nt">-v</span>, <span class="nt">--verify</span>          验证 tags

Tag 创建选项
    <span class="nt">-a</span>, <span class="nt">--annotate</span>        注解 tag，需要一个说明
    <span class="nt">-m</span>, <span class="nt">--message</span> &lt;说明&gt;  tag 说明
    <span class="nt">-F</span>, <span class="nt">--file</span> &lt;文件&gt;     从文件中读取提交说明
    <span class="nt">-s</span>, <span class="nt">--sign</span>            注解并 GPG 签名的 tag
    <span class="nt">--cleanup</span> &lt;模式&gt;      设置如何删除提交说明里的空格和#注释
    <span class="nt">-u</span>, <span class="nt">--local-user</span> &lt;key-id&gt;
                          使用另外的私钥签名 tag
    <span class="nt">-f</span>, <span class="nt">--force</span>           如果存在，替换现有的 tag
    <span class="nt">--column</span><span class="o">[=</span>&lt;风格&gt;]     以列的方式显示 tag
    <span class="nt">--sort</span> &lt;类型&gt;         排序 tags

Tag 列表选项
    <span class="nt">--contains</span> &lt;提交&gt;     只打印包含提交的tags
    <span class="nt">--points-at</span> &lt;对象&gt;    只打印tags对象
    
</code></pre></div></div>

<h2 id="查看所有-tag">查看所有 tag</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag
或者
git tag <span class="nt">-l</span>

v4.5.2
v4.5.3
v4.5.5
v5.0.0
v5.0.1
v5.0.2
v5.0.4
</code></pre></div></div>

<p>注意此时显示的 tag 是按字母排序的，而不是按打 tag 的时间。</p>

<h2 id="搜索-tag">搜索 tag</h2>

<p>可以用特定的搜索模式列出符合条件的 tag。例如：列出所有 5.0 的版本。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag <span class="nt">-l</span> <span class="s1">'v5.0*'</span>

v5.0.0
v5.0.1
v5.0.2
v5.0.4
</code></pre></div></div>

<h2 id="创建-tag">创建 tag</h2>

<p>创建 tag 有两种方式，一种是创建 lightweight （轻量级的），另一种是 annotated （含标记的）。这两种的区别 git book 中给出的解释是：</p>

<blockquote>
  <p>轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>
</blockquote>

<p>所以，一般来说是推荐使用 annotated。</p>

<h3 id="创建轻量级-tag">创建轻量级 tag</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag v0.1
</code></pre></div></div>

<p>此时 <code class="highlighter-rouge">-a</code> <code class="highlighter-rouge">-m</code> 选项都不需要，只需要制定 tag 名称即可。</p>

<h3 id="创建含标注的-tag">创建含标注的 tag</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag <span class="nt">-a</span> v1.0 <span class="nt">-m</span> <span class="s1">'this is a test tag.'</span>
</code></pre></div></div>

<p>需要注意的是，如果 <code class="highlighter-rouge">-m</code> option 没有给出， git 会启动文本编辑软件供用户输入说明。个人推荐这种方式，因为在文本编辑器中可以输入大段的文本、列表、回车等等，这时就可以输入这个 tag 的详细描述了（新功能、bug 列表等变更记录），而在 -m 选项中一般只能输入一行文字。</p>

<h3 id="查看创建的-tag">查看创建的 tag</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git show v1.0

tag v1.0
Tagger: tonghs &lt;tonghuashuai@gmail.com&gt;
Date:   Tue May 17 09:38:59 2016 +0800

<span class="k">*</span> this is a <span class="nb">test </span>tag
<span class="k">*</span> this tag will be removed

commit 6b5c580f5b6b1a3b2a06bf0bf7682a7fe4942fb4
Merge: adfe681 c62cb18
Author: 仝华帅 &lt;tonghuashuai@pe.vc&gt;
Date:   Tue May 17 08:11:35 2016 +0800

    Merge branch <span class="s1">'master'</span> into <span class="s1">'master'</span>
</code></pre></div></div>

<p>轻量级的 tag 显示的信息除了没有说明以外，其他的都一样。</p>

<h2 id="后期补-tag">后期补 tag</h2>

<p>想想一个这样的场景：本应该在某次提交（9fceb02d0ae598e95dc970b74767f19372d61af8）后加上 tag，结果忘了，此时该次提交后已经有了其他的 commit，此时如果需要补 tag 的话，不需要将代码 rollback 到 9fceb02d0ae598e95dc970b74767f19372d61af8 也可以打 tag。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag <span class="nt">-a</span> v1.2 9fceb02
</code></pre></div></div>

<h2 id="push-tag">push tag</h2>

<p>tag 打好后需要 push 到远端服务器上，默认情况下，git push 并不会 push tag。push tag 的命令类似于 push 分支：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin v1.0
</code></pre></div></div>

<p>如果想 push 所有本地 tag，可以使用 <code class="highlighter-rouge">--tags</code> option。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin <span class="nt">--tags</span>
</code></pre></div></div>

<h2 id="删除标签">删除标签</h2>

<p>未 push 的 tag：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag <span class="nt">-d</span> v1.0

已删除 tag <span class="s1">'v1.0'</span>（曾为 623b6a1）
</code></pre></div></div>

<p>已经 push 的 tag：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin <span class="nt">--delete</span> tag v1.0
</code></pre></div></div>
:ET