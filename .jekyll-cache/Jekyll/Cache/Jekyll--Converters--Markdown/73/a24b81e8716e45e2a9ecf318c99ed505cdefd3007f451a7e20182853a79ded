I"r<h2 id="使用-conda-管理-python-环境">使用 Conda 管理 Python 环境</h2>

<p>Conda 可以方便的管理 Python 环境，可用于管理包依赖、解决多版本共存等等问题，我们使用的是 Miniconda。查看 <a href="https://conda.io/miniconda.html">Miniconda 的下载地址</a>。安装方法请参考<a href="https://conda.io/docs/user-guide/install/linux.html">该文档</a>。
Conda 的设计理念：Conda 将几乎所有的工具、第三方包都当做 package 对待，甚至包括 Python 和 Conda 自身！Conda 使用类似沙箱的机制来隔离不同的项目之间的环境。所以对一个新项目来说，我们首先需要新建环境。</p>
<h3 id="环境管理">环境管理</h3>
<p>使用命令行新建环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span> 新建环境：
conda create <span class="nt">--name</span> myenv

<span class="k">*</span> 新建环境是指定 Python 版本：
conda create <span class="nt">-n</span> myenv <span class="nv">python</span><span class="o">=</span>3.4

<span class="k">*</span> 新建包含特定包的环境：
conda create <span class="nt">-n</span> myenv scipy
或者
conda create <span class="nt">-n</span> myenv python
conda <span class="nb">install</span> <span class="nt">-n</span> myenv scipy

<span class="k">*</span> 新建环境包含特定包并制定特定版本：
conda create <span class="nt">-n</span> myenv <span class="nv">scipy</span><span class="o">=</span>0.15.0

<span class="k">*</span> 新建包含多个包的环境：
conda create <span class="nt">-n</span> myenv <span class="nv">python</span><span class="o">=</span>3.4 <span class="nv">scipy</span><span class="o">=</span>0.15.0 astroid babel

<span class="k">*</span> To automatically <span class="nb">install </span>pip or another program every <span class="nb">time </span>a new environment is created, add the default programs to the create_default_packages section of your .condarc configuration file. The default packages are installed every <span class="nb">time </span>you create a new environment. If you <span class="k">do </span>not want the default packages installed <span class="k">in </span>a particular environment, use the <span class="nt">--no-default-packages</span> flag:
conda create <span class="nt">--no-default-packages</span> <span class="nt">-n</span> myenv python
</code></pre></div></div>

<p>使用以下命令参考更多：</p>
<pre><code class="language-markup">conda create --help
</code></pre>

<p>使用 environment.yml 文件创建环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">env </span>create <span class="nt">-f</span> environment.yml
</code></pre></div></div>

<p>根据 environment.yml 更新环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">env </span>update <span class="nt">-f</span> environment.yml
</code></pre></div></div>

<p>进入环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>activate myenv
</code></pre></div></div>

<p>退出环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>deactivate
</code></pre></div></div>

<p>克隆环境</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create --name myclone --clone myenv
</code></pre></div></div>

<p>查看环境 package list</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* 在环境内：
conda list

* 不在环境内：
conda list -n myenv
</code></pre></div></div>

<p>在环境中同样可以使用 pip：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda install -n myenv pip
source
 activate myenv
pip &lt;pip_subcommand&gt;
</code></pre></div></div>

<p>删除环境</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda remove --name myenv --all
</code></pre></div></div>

<h3 id="environmentyml-文件">environment.yml 文件</h3>
<p>根据当前环境导出</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">env export</span> <span class="o">&gt;</span> environment.yml
</code></pre></div></div>
<p>此时可以将创建的 environment.yml 文件 share 其他同学。</p>

<p>手动创建
我们也可以手动创建 environment.yml 文件。一个简单的例子：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">stats</span>
<span class="na">dependencies</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">numpy</span>
  <span class="pi">-</span> <span class="s">pandas</span>
</code></pre></div></div>

<p>一个复杂点的例子：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">stats2</span>
<span class="na">channels</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">javascript</span>
<span class="na">dependencies</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">python=3.4</span>   <span class="c1"># or 2.7</span>
  <span class="pi">-</span> <span class="s">bokeh=0.9.2</span>
  <span class="pi">-</span> <span class="s">numpy=1.9.*</span>
  <span class="pi">-</span> <span class="s">nodejs=0.10.*</span>
  <span class="pi">-</span> <span class="s">flask</span>
  <span class="pi">-</span> <span class="na">pip</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">Flask-Testing</span>
</code></pre></div></div>

<p>既然有了 dependencies 为什么还用 pip 呢？我考虑可能是 pip 可以使用 github 或 url 的方式安装包，而将 url 直接写在 dependencies 中应该不行。</p>

<h3 id="包管理">包管理</h3>
<p>conda 的大部分命令跟 pip 类似，基本上有一下命令：</p>
<ul>
  <li>search：搜索包</li>
  <li>install：安装包</li>
  <li>使用 pip 安装包</li>
  <li>list：列出所有包</li>
  <li>update：更新包</li>
  <li>remove：删除包</li>
</ul>
:ET