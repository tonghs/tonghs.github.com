---
author: ths
comments: true
date: 2012-08-10 06:35:00+00:00
layout: post
slug: '%e7%94%a8%e6%88%b7%e8%af%bb%e5%8f%96%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e4%be%8b%e7%a8%8b'
title: 用户读取配置文件例程
wordpress_id: 855
categories:
- 技术
tags:
- conf
- 配置文件
---

用C读取用户配置文件.conf的两个示例  
最近研究如何在linux上写个简单易用的802.1x client ，所以研究了一些c代码  
发现这两个代码蛮有用的，以后如果写要读文件的程序可以参考一下了  
一  

    
    <span class="kwrd">static</span> <span class="kwrd">void</span> setConfig(<span class="kwrd">void</span>)
    {
       FILE  *fp;
       <span class="kwrd">char</span>   buf[4096];
       <span class="kwrd">char</span>  *p;
       <span class="kwrd">int</span>   i,len;
       <span class="kwrd">static</span> <span class="kwrd">char</span> name[32];
       <span class="kwrd">static</span> <span class="kwrd">char</span> password[32];
       <span class="kwrd">static</span> <span class="kwrd">char</span> nic[32];
       <span class="kwrd">static</span> <span class="kwrd">char</span> fakeAddress[32];
       <span class="kwrd">int</span>  intelligentReconnect=-1;
       <span class="kwrd">int</span>  echoInterval=-1;
       <span class="kwrd">int</span>  authenticationMode=-1;
       <span class="rem">//the check and anylysis against Dot1xClient.conf  *don't*  work perfectly.</span>
       <span class="rem">//this may be improved in the later version.</span>
       <span class="kwrd">if</span>( (fp=fopen(<span class="str">"Dot1xClient.conf"</span>,<span class="str">"r"</span>))==NULL )
        err_quit(<span class="str">"cannot open file Dot1xClient.conf ! check it.n"</span>);
       <span class="kwrd">while</span>(fgets(buf,<span class="kwrd">sizeof</span>(buf),fp)!=NULL)<span class="rem">//fgets遇到换行或EOF会结束</span>
         {
             <span class="kwrd">if</span>( (buf[0]==<span class="str">'#'</span>) || (buf[0]==<span class="str">'n'</span>) )
            <span class="kwrd">continue</span>;<span class="rem">//继续下一循环</span>
             len=strlen(buf);
             <span class="kwrd">if</span>(buf[len-1]==<span class="str">'n'</span>)
            buf[len-1]=<span class="str">' '</span>;<span class="rem">//in order to form a string</span>
             <span class="kwrd">if</span>( ( (p=strchr(buf,<span class="str">'='</span>)) == NULL) || (p==buf) )<span class="rem">//if not find =</span>
            <span class="kwrd">continue</span>;
             <span class="rem">//the code above doesn't detect ALL the errors!! it should be improved in future.</span>
             *p=<span class="str">' '</span>;<span class="rem">//break the string into 2 parts.</span>
        p++;<span class="rem">//p ponit to the value now</span>
             <span class="kwrd">for</span>(i=0; i<strlen(buf); i++)
            buf[i]=tolower(buf[i]);
             <span class="kwrd">if</span>(strcmp(buf,<span class="str">"name"</span>)==0)
                {  strncpy(name,p,<span class="kwrd">sizeof</span>(name)-1); <span class="rem">//char *strncpy(char *dest, const char *src, size_t n);</span>
            name[<span class="kwrd">sizeof</span>(name)-1]=0;
            m_name=name;
        }
             <span class="kwrd">else</span> <span class="kwrd">if</span>(strcmp(buf,<span class="str">"password"</span>)==0)
                {
                  strncpy(password,p,<span class="kwrd">sizeof</span>(password)-1); password[<span class="kwrd">sizeof</span>(password)-1]=0;
                  m_password=password;
                 }
             <span class="kwrd">else</span> <span class="kwrd">if</span>(strcmp(buf,<span class="str">"authenticationmode"</span>)==0)
                { authenticationMode=atoi(p);  
            m_authenticationMode=authenticationMode; }
             <span class="kwrd">else</span> <span class="kwrd">if</span>(strcmp(buf,<span class="str">"nic"</span>)==0)
                {
                   <span class="kwrd">for</span>(i=0; i<strlen(p); i++) p[i]=tolower(p[i]);
                   strncpy(nic,p,<span class="kwrd">sizeof</span>(nic)-1); nic[<span class="kwrd">sizeof</span>(nic)-1]=0; m_nic=nic;
                 }
             <span class="kwrd">else</span> <span class="kwrd">if</span>(strcmp(buf,<span class="str">"echointerval"</span>)==0)
                     { echoInterval=atoi(p);   m_echoInterval=echoInterval;  }
             <span class="kwrd">else</span> <span class="kwrd">if</span>(strcmp(buf,<span class="str">"intelligentreconnect"</span>)==0)
                     { intelligentReconnect=atoi(p);  m_intelligentReconnect=intelligentReconnect; }
             <span class="kwrd">else</span> <span class="kwrd">if</span>(strcmp(buf,<span class="str">"fakeaddress"</span>)==0)
                    {
                          strncpy(fakeAddress,p,<span class="kwrd">sizeof</span>(fakeAddress)-1);
                          fakeAddress[<span class="kwrd">sizeof</span>(fakeAddress)-1]=0;
                          <span class="kwrd">if</span>( inet_pton(AF_INET,fakeAddress,m_ip)<=0 )
                             err_msg(<span class="str">"invalid fakeAddress found in Dot1xClient.conf, ignored...n"</span>);
                          <span class="kwrd">else</span> m_fakeAddress=fakeAddress;
                    }
             <span class="kwrd">else</span> <span class="kwrd">continue</span>;
         }
       <span class="kwrd">if</span>(ferror(fp)) err_quit(<span class="str">"cannot read Dot1xClient.conf ! check it.n"</span>);
       fclose(fp);
       <span class="kwrd">if</span>((m_name==NULL)||(m_name[0]==0)) err_quit(<span class="str">"invalid name found in Dot1xClient.conf!n"</span>);
       <span class="kwrd">if</span>((m_password==NULL)||(m_password[0]==0)) err_quit(<span class="str">"invalid password found in Dot1xClient.conf!n"</span>);
       <span class="kwrd">if</span>((m_authenticationMode<0)||(m_authenticationMode>1))
               err_quit(<span class="str">"invalid authenticationMode found in Dot1xClient.conf!n"</span>);
       <span class="kwrd">if</span>( (m_nic==NULL) || (strcmp(m_nic,<span class="str">""</span>)==0) ||  (strcmp(m_nic,<span class="str">"any"</span>)==0) )
           err_quit(<span class="str">"invalid nic found in Dot1xClient.conf!n"</span>);
       <span class="kwrd">if</span>((m_echoInterval<0)||(m_echoInterval>100))
          err_quit(<span class="str">"invalid echo interval found in Dot1xClient.conf!n"</span> );
       <span class="kwrd">if</span>((m_intelligentReconnect<0)||(m_intelligentReconnect>1))
          err_quit(<span class="str">"invalid intelligentReconnect found in Dot1xClient.conf!n"</span>);
       <span class="rem">/*printf("m_name=%sn",m_name);</span>
    <span class="rem">   printf("m_password=%sn",m_password);</span>
    <span class="rem">   printf("m_nic=%sn",m_nic);</span>
    <span class="rem">   printf("m_authenticationMode=%dn",m_authenticationMode);</span>
    <span class="rem">   printf("m_echoInterval=%dn",m_echoInterval);</span>
    <span class="rem">   printf("m_intelligentReconnect=%dn",m_intelligentReconnect);//NOT supported now!!</span>
    <span class="rem">   printf("m_fakeAddress=%sn",m_fakeAddress); */</span>
       <span class="rem">//just set them to zero since they don't seem to be important.</span>
       memset(m_netgate,0,<span class="kwrd">sizeof</span>(m_netgate));  memset(m_dns1,0,<span class="kwrd">sizeof</span>(m_dns1));
    }
    



二  

    
    <span class="kwrd">void</span> checkconfig()
    {
        <span class="kwrd">char</span> line[100];
        printf(<span class="str">"checking user config...n"</span>);
        <span class="kwrd">while</span>(fgets(line,100,file))
        {
            line[strlen(line)-1]=<span class="str">' '</span>;<span class="rem">//add a flag of string end</span>
            <span class="kwrd">if</span>(!memcmp(<span class="str">"username"</span>,line,strlen(<span class="str">"username"</span>)))<span class="rem">//if find username</span>
            {
                memcpy(usrData.username,(line+<span class="kwrd">sizeof</span>(<span class="str">"username"</span>)),<span class="kwrd">sizeof</span>(usrData.username));
                printf(<span class="str">"%sn"</span>,usrData.username);
                <span class="kwrd">continue</span>;
            }
            <span class="kwrd">if</span>(!memcmp(<span class="str">"password"</span>,line,strlen(<span class="str">"password"</span>)))
            {
                memcpy(usrData.password,(line+<span class="kwrd">sizeof</span>(<span class="str">"password"</span>)),<span class="kwrd">sizeof</span>(usrData.password));
                printf(<span class="str">"********n"</span>);
                <span class="kwrd">continue</span>;
            }
            <span class="kwrd">if</span>(!memcmp(<span class="str">"Ip"</span>,line,strlen(<span class="str">"Ip"</span>)))
            {
                memcpy(usrData.Ip,(unsigned <span class="kwrd">char</span> *)(line+<span class="kwrd">sizeof</span>(<span class="str">"Ip"</span>)),<span class="kwrd">sizeof</span>(usrData.Ip));
                sprintf(strIP,<span class="str">"%d.%d.%d.%d"</span>,usrData.Ip[0],usrData.Ip[1],usrData.Ip[2],usrData.Ip[3]);<span class="rem">//先格式化一下字符窜</span>
                printf(<span class="str">"%sn"</span>,strIP);
                <span class="kwrd">continue</span>;
            }
            <span class="kwrd">if</span>(!memcmp(<span class="str">"Mac"</span>,line,strlen(<span class="str">"Mac"</span>)))
            {
                memcpy(usrData.Mac,(unsigned <span class="kwrd">char</span> *)(line+<span class="kwrd">sizeof</span>(<span class="str">"Mac"</span>)),<span class="kwrd">sizeof</span>(usrData.Mac));
                printf(<span class="str">"%02x-%02x-%02x-%02x-%02x-%02xn"</span>,usrData.Mac[0],usrData.Mac[1],
                    usrData.Mac[2],usrData.Mac[3],usrData.Mac[4],usrData.Mac[5]);
                <span class="kwrd">continue</span>;
            }
            <span class="kwrd">if</span>(!memcmp(<span class="str">"nic"</span>,line,strlen(<span class="str">"nic"</span>)))
            {
                memcpy(usrData.nic,(line+<span class="kwrd">sizeof</span>(<span class="str">"nic"</span>)),<span class="kwrd">sizeof</span>(usrData.nic));
                printf(<span class="str">"%sn"</span>,usrData.nic);
                <span class="kwrd">break</span>;
            }
        }
        fclose(file);
    }
    <span class="kwrd">void</span> writeconfig()
    {      
        file=fopen(<span class="str">"dot1xClient.conf"</span>,<span class="str">"w"</span>);
        fputs(<span class="str">"username="</span>,file);
        fputs(usrData.username,file);
        fputs(<span class="str">"n"</span>,file);
        fputs(<span class="str">"password="</span>,file);
        fputs(usrData.password,file);
        fputs(<span class="str">"n"</span>,file);
        fputs(<span class="str">"Ip="</span>,file);
        fputc(usrData.Ip[0],file);
        fputc(usrData.Ip[1],file);
        fputc(usrData.Ip[2],file);
        fputc(usrData.Ip[3],file);
        fputs(<span class="str">"n"</span>,file);
        fputs(<span class="str">"Mac="</span>,file);
        fputc(usrData.Mac[0],file);
        fputc(usrData.Mac[1],file);
        fputc(usrData.Mac[2],file);
        fputc(usrData.Mac[3],file);
        fputc(usrData.Mac[4],file);
        fputc(usrData.Mac[5],file);
        fputs(<span class="str">"n"</span>,file);
        fputs(<span class="str">"nic="</span>,file);
            fputs(usrData.nic,file);
        fputs(<span class="str">"n"</span>,file);
        fclose(file);
    } 






