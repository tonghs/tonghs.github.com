---
author: ths
comments: true
date: 2013-06-10 05:03:43+00:00
layout: post
slug: extjs-4-0-grid-%e8%b7%b3%e5%8a%a8%e6%9c%89%e5%85%b3%e9%97%ae%e9%a2%98%e7%a0%94%e7%a9%b6
title: Extjs 4.0 Grid 跳动有关问题研究
wordpress_id: 1148
categories:
- 技术
tags:
- Extjs
- Grid
- 跳动
---

说说点击Extjs 4.0 Grid的行跳动的问题，调查发现主要是selModel的问题





**解决方案1**：监听取消





代码如下：





selModel: Ext.create('Ext.selection.Model', { listeners: {} })





在Extjs Blog中找到。比较麻烦的事如果不用Ext.selection.Model,那么上面的方法就不好使





**解决方案2** ：复写原类





Extjs 4.0 Grid跳动的主要原因是focus的问题





官网的话：





BrowserBug: WebKit & IE refuse to focus the element, rather it will focus it and then immediately focus the body. This





temporary hack works for Webkit and IE6. IE7 and 8 are still broken





代码如下：




    
    Ext.override(Ext.selection.RowModel, {
        onRowMouseDown: function (view, record, item, index, e) {
            this.selectWithEvent(record, e);
        }
    });





或者:




    
    Ext.override(Ext.selection.CheckboxModel, {
          onRowMouseDown: function(view, record, item, index, e) {
             var me = this;
             var checker = e.getTarget('.' + Ext.baseCSSPrefix + 'grid-row-checker');
            if (!me.allowRightMouseSelection(e)) {
                return;
            }
    
            if (me.checkOnly && !checker) {
                return;
            }
    
            if (checker) {
                var mode = me.getSelectionMode();
                if (mode !== 'SINGLE') {
                    me.setSelectionMode('SIMPLE');
                }
                me.selectWithEvent(record, e);
                me.setSelectionMode(mode);
            } else {
                me.selectWithEvent(record, e);
            }
        }
    });
    
    Ext.override(Ext.grid.plugin.CellEditing, {
          cancelEdit: function() {
            var me = this,
                activeEd = me.getActiveEditor(),
                viewEl = me.grid.getView().getEl(me.getActiveColumn());
    
            me.setActiveEditor(null);
            me.setActiveColumn(null);
            me.setActiveRecord(null);
            if (activeEd) {
                activeEd.cancelEdit();
            }
          },
          startEdit: function(record, columnHeader) {
            var me = this,
                value = record.get(columnHeader.dataIndex),
                context = me.getEditingContext(record, columnHeader),
                ed;
    
            record = context.record;
            columnHeader = context.column;
    
            me.completeEdit();
    
            context.originalValue = context.value = value;
            if (me.beforeEdit(context) === false || me.fireEvent('beforeedit', context) === false || context.cancel) {
                return false;
            }
    
            if (columnHeader && !columnHeader.getEditor(record)) {
                return false;
            }
    
            ed = me.getEditor(record, columnHeader);
            if (ed) {
                me.context = context;
                me.setActiveEditor(ed);
                me.setActiveRecord(record);
                me.setActiveColumn(columnHeader);
    
                me.editTask.delay(15, ed.startEdit, ed, [me.getCell(record, columnHeader), value]);
            }
            },    
            onEditComplete : function(ed, value, startValue) {
            var me = this,
                grid = me.grid,
                sm = grid.getSelectionModel(),
                activeColumn = me.getActiveColumn(),
                dataIndex;
    
            if (activeColumn) {
                dataIndex = activeColumn.dataIndex;
    
                me.setActiveEditor(null);
                me.setActiveColumn(null);
                me.setActiveRecord(null);
                delete sm.wasEditing;
    
                if (!me.validateEdit()) {
                    return;
                }
                if (value !== startValue) {
                    me.context.record.set(dataIndex, value);
                } 
                me.context.value = value;
                me.fireEvent('edit', me, me.context);
            }
        }
    });



