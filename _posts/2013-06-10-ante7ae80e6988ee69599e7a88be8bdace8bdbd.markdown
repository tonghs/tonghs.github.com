---
author: ths
comments: true
date: 2013-06-10 04:34:18+00:00
layout: post
slug: ant%e7%ae%80%e6%98%8e%e6%95%99%e7%a8%8b%e8%bd%ac%e8%bd%bd
title: ANT简明教程[转载]
wordpress_id: 1134
categories:
- 分享
tags:
- ANT
---

### [http://www.cnblogs.com/philander/articles/1782254.html](http://www.cnblogs.com/philander/articles/1782254.html)





### 一、ant关键元素





#### 1. project元素





project 元素是 Ant 构件文件的根元素， Ant 构件文件至少应该包含一个 project 元素，否则会发生错误。在每个 project 元素下，可包含多个 target 元素。接下来向读者展示一下 project 元素的各属性。





**1) ****name ****属性**





用于指定 project 元素的名称。





**2) ****default ****属性**





用于指定 project 默认执行时所执行的 target 的名称。





**3) ****basedir ****属性**





用于指定基路径的位置。该属性没有指定时，使用 Ant 的构件文件的附目录作为基准目录。











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6









`<?``xml` `version``=``"1.0"` `?>`




`<``project` `name` `=``"antPro"` `default` `=``"getBaseDir"` `basedir` `=``"C:/ThinkInJavaCode"``>`




`        ``<``target`  `name``=``"getBaseDir"``>`




`               ``<``echo` `message``=``"The base dir is: ${basedir}"``/>`




`        ``</``target``>`




`</``project``>`

















从上例可以看出，在这里定义了default 属性的值为getBaseDir ，即当运行ant 命令时，如果没有指明待执行的target，则将执行默认的target--getBaseDir 。此外，还定义了basedir 属性的值为 "C:/ThinkInJavaCode" ，进入"C:/ThinkInJavaCode" 后运行ant 命令，得一下结果：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7









`Buildfile: C:\ThinkInJavaCode\build.xml`







`sayBaseDir:`




`     ``[echo] The base dir is: C:\ThinkInJavaCode`







`BUILD SUCCESSFUL`




`Total time: 0 seconds`

















#### **2. ********target ****元素**





target为Ant的基本执行单元，它可以包含一个或多个具体的任务。多个target 可以存在相互依赖关系。它有如下属性：





**1) ****name ****属性**





指定 target 元素的名称，这个属性在一个 project 元素中是唯一的。我们可以通过指定 target 元素的名称来指定某个 target 。





**2) ****depends ****属性**





用于描述 target 之间的依赖关系，若与多个 target 存在依赖关系时，需要以“,”间隔。 Ant 会依照 depends 属性中 target 出现的顺序依次执行每个 target 。被依赖的 target 会先执行。





**3) ****if ****属性**





用于验证指定的属性是否存在，若不存在，所在 target 将不会被执行。





**4) ****unless ****属性**





该属性的功能与 if 属性的功能正好相反，它也用于验证指定的属性是否存在，若不存在，所在 target 将会被执行。





**5) ****description ****属性**





该属性是关于 target 功能的简短描述和说明。





举例说明如下：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8




9




10




11




12









`<?``xml` `version``=``"1.0"` `?> `




`<``project` `name` `=``"targetPro"` `default``=``"targetB"``> `




`<``target` `name``=``"targetA"` `if` `=``"ant.java.version"``> `




`        ``<``echo` `message` `=``"Java Version: ${ant.java.version}"``/> `




`    ``</``target``> `




`    ``<``target` `name``=``"targetB"`  `depends` `=``"targetA"` `unless` `=``"philander"``> `




`        ``<``description``> `




`            ``a depend example! `




`        ``</``description``> `




`        ``<``echo` `message` `=``"The base dir is: ${basedir}"``/> `




`    ``</``target``> `




`</``project``>`

















从以下结果后可以看到，我们运行的是名为 targetB 的target ，由于它依赖于targetA ，所以 targetA 将首先被执行，同时因为系统配置了JDK，所以 ant.java.version 属性存在，执行了targetA，输出信息："[echo] Java Version: 1.6 "，targetA 执行完毕后，接着执行 targetB ，因为philander不存在，而unless属性是在不存在时进入所在target 的，由此可知 targetB 得以执行，输出信息："[echo] The base dir is: C:\ThinkInJavaCode"。











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8




9




10









`Buildfile: C:\ThinkInJavaCode\build.xml`







`targetA:`




`     ``[echo] Java Version: 1.6`







`targetB:`




`     ``[echo] The base dir is: C:\ThinkInJavaCode`







`BUILD SUCCESSFUL`




`Total time: 0 seconds`

















#### **3. ********property ****元素**





property元素可看作参量或者参数的定义，project 的属性可以通过 property 元素来设定，也可在 Ant 之外设定。若要在外部引入某文件，例如 build.properties 文件，可以通过如下内容将其引入：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``property` `file=” build.properties”/>`

















property 元素可用作 task 的属性值。在 task 中是通过将属性名放在“ ${ ”和“ } ”之间，并放在 task 属性值的位置来实现的。





Ant 提供了一些内置的属性，它能得到的系统属性的列表与 Java 文档中 System.getPropertis() 方法得到的属性一致，这些系统属性可参考 sun 网站的说明。同时， Ant 还提供了一些它自己的内置属性，如下：





basedir:project 基目录的绝对路径；





ant.file:buildfile的绝对路径，上例中ant.file值为C:\ThinkInJavaCode\build.xml；





ant.version:Ant 的版本信息，本文为1.8.1 ；





ant.project.name:当前指定的project的名字，即前文说到的project的name属性值；





ant.java.version:Ant 检测到的JDK版本，本文为 1.6 。





举例说明如下：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8









`<? ``xml` `version``=``"1.0"` `?>`




`<``project`  `name` `=``"propertyPro"`  `default` `=``"example"``>`




`    ``<``property`  `name` `=``"name"`  `value` `=``"philander"``/>`




`    ``<``property`  `name` `=``"age"`  `value` `=``"25"``/>`




`    ``<``target`  `name` `=``"example"``>`




`         ``<``echo`  `message` `=``"name: ${name}, age: ${age}"``/>`




`    ``</``target``>`




`</``project``>`

















上例中用户设置了名为name 和age的两个属性，这两个属性设置后，在下文中可以通过 ${name} 和 ${age} 分别取得这两个属性值。





### 二、ANT常用命令





#### **1. ********copy 命令**





copy主要用来对文件和目录的复制功能。举例如下：





eg1. 复制单个文件：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``copy` `file``=``"original.txt"` `tofile``=``"copied.txt"``/>`

















eg2. 对文件目录进行复制：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3









`<``copy` `todir``=``"../dest_dir"``>`




`      ``<``fileset` `dir``=``"src_dir"``/>`




` ``</``copy``>`

















eg3. 将文件复制到另外的目录：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``copy` `file``=``"source.txt"` `todir``=``"../home/philander"``/>`

















#### **2. ********delete **命令





对文件或目录进行删除，举例如下：





eg1. 删除某个文件：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``delete` `file``=``"/home/photos/philander.jpg"``/>`

















eg2. 删除某个目录：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``delete` `dir``=``"/home/photos"``/>`

















eg3. 删除所有的备份目录或空目录：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3









`<``delete` `includeEmptyDirs``=``"true"``>`




`       ``<``fileset` `dir``=``"."` `includes``=``"**/*.bak"``/>`




`</``delete``>`

















#### **3. ********mkdir **命令





创建目录。 eg ：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``mkdir` `dir``=``"/home/philander/build/classes"``/>`

















#### **4. ********move **命令





移动文件或目录，举例如下：





eg1. 移动单个文件：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``move` `file``=``"sourcefile"` `tofile=”destfile”/>`

















eg2. 移动单个文件到另一个目录：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``move` `file``=``"sourcefile"` `todir=”movedir”/>`

















eg3. 移动某个目录到另一个目录：





<move todir="newdir"> <fileset dir="olddir"/></move>





#### 5**. ********echo **命令





该任务的作用是根据日志或监控器的级别输出信息。它包括 message 、 file 、 append 和 level 四个属性，举例如下











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`<``echo` `message``=``"Hello,ANT"` `file``=``"/home/philander/logs/ant.log"` `append``=``"true"``>`

















### 三、**利用a****nt ****构建和部署****Java****项目**





Ant 可以代替使用 javac 、 java 和 jar 等命令来执行 java 操作，从而达到轻松的构建和部署 Java 项目的目的。





#### **1. ********利用a****nt ****的javac****命令来编译Java****程序**





Ant 的javac命令用于实现编译Java 程序的功能。下面来看一个简单的例子：首先我们建立名为 JavaTestPro的Java项目，建立src目录为源代码目录，在src目录下建立HelloWorld.java这个类文件。该类文件的内容如下：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5









`public class HelloWorld {`




`     ``public static void main(String[] args) {`




`    ``System.out.println("hello world!");`




`     ``}`




`}`

















同时在JavaTestPro项目的根目录下建立build.xml 文件，在该文件中编译sr 目录下的Java文件，并将编译后的class文件放入build/classes 目录中，整个项目的目录结构如下：





> |JavaTestPro

|src

|build

|classes

|build.xml





在编译前，需清除classes 目录，该文件的内容如下：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8




9




10




11









`<?``xml` `version``=``"1.0"` `?>`







`<``project` `name` `=``"javacTest"` `default``=``"compile"` `basedir``=``"."``>`




`    ``<``target` `name``=``"clean"``>`




`        ``<``delete` `dir``=``"${basedir}/build"``/>`




`    ``</``target``>`




`    ``<``target` `name``=``"compile"`  `depends` `=``"clean"``>`




`        ``<``mkdir` `dir` `=``"${basedir}/build/classes"``/>`




`        ``<``javac` `srcdir` `=``"${basedir}/src"` `destdir` `=``"${basedir}/build/classes"``/>`




`    ``</``target``>`




`</``project``>`

















在项目根目录(C:\ThinkInJavaCode\JavaTestPro)执行ant命令后，可在该目录下发现新生成的build/classes子目录，编译后生成的HelloWorld.class文件就在该目录下。





#### **2. ********使用java****命令执行****Java****程序**





Ant 中可以使用 java命令实现运行Java程序的功能。可以在上面的build.xml基础上做修改来实现：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17









`<?``xml` `version``=``"1.0"` `?>`




`<``project` `name` `=``"javacTest"` `default``=``"run"` `basedir``=``"."``>`




`    ``<``target` `name``=``"clean"``>`




`        ``<``delete` `dir``=``"${basedir}/build"``/>`




`    ``</``target``>`




`    ``<``target` `name``=``"compile"`  `depends` `=``"clean"``>`




`        ``<``mkdir` `dir` `=``"${basedir}/build/classes"``/>`




`        ``<``javac` `srcdir` `=``"${basedir}/src"` `destdir` `=``"${basedir}/build/classes"``/>`




`    ``</``target``>`




`     ``<``target` `name``=``"run"`  `depends` `=``"compile"``>`




`        ``<``java` `classname` `=``"HelloWorld"``>`




`            ``<``classpath``>`




`               ``<``pathelement` `path``=``"${basedir}/build/classes"``/>`




`            ``</``classpath``>`




`        ``</``java``>`




`    ``</``target``>`




`</``project``>`

















接着，就可以在控制台看见输出："[java] hello world!"





#### **3. ********使用****jar命令****生成****jar****文件**





还可以在上例的基础上更进一步，来生成jar包，可在run 这个 target 下再加上如下 target ：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24









`<?``xml` `version``=``"1.0"` `?>`




`<``project` `name` `=``"javacTest"` `default``=``"jar"` `basedir``=``"."``>`




`    ``<``target` `name``=``"clean"``>`




`        ``<``delete` `dir``=``"${basedir}/build"``/>`




`    ``</``target``>`




`    ``<``target` `name``=``"compile"`  `depends` `=``"clean"``>`




`        ``<``mkdir` `dir` `=``"${basedir}/build/classes"``/>`




`        ``<``javac` `srcdir` `=``"${basedir}/src"` `destdir` `=``"${basedir}/build/classes"``/>`




`    ``</``target``>`




`    ``<``target` `name``=``"run"`  `depends``=``"compile"``>`




`          ``<``java` `classname` `=``"HelloWorld"``>`




`    ``<``classpath``>`




`                    ``<``pathelement` `path``=``"${basedir}/build/classes"``/>`




`                 ``</``classpath``>`




`           ``</``java``>`




`    ``</``target``>`




`    ``<``target` `name``=``"jar"` `depends``=``"run"``>`




`           ``<``jar` `destfile``=``"helloworld.jar"` `basedir``=``"${basedir}/build/classes"``>`




`                ``<``manifest``>`




`        ``<``attribute` `name``=``"Main-class"` `value``=``"HelloWorld"``/>`




`                ``</``manifest``>`




`            ``</``jar``>`




`    ``</``target` `>`




`</``project``>`

















其中，project的default 属性设置为应设为jar，ant运行完毕后，可看到在项目的根目录下生成了一个 helloworld.jar的jar包 。可通过运行以下命令来执行该jar包：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1









`java -jar helloworld.jar`

















#### **4. ********使用****war命令****打包****JavaEE****项目**





建立一个JavaEE项目，其中src 为Java源代码目录，WebContent为各jsp存放目录，lib 为项目引用的的包的目录。在WebTest项目目录下建立了build.xml 文件，该文件为该工程的 Ant 构件文件。





> |WebContent

|src

|build

|classes

|WebContent

|META-INF

|MANIFEST.MF

|WEB-INF

|lib

|classes

|**HelloJSP.jsp**

|**build.xml**





读者可以 src 目录下放入在前续例子中开发的 HelloWorld.java 文件，并在 WebContent下建立 HelloJSP.jsp 文件，其内容很简单，就是输出 Hello 信息，代码如下所示：











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8




9




10




11









`<%@` `page language=``"java"` `contentType=``"text/html;charset=UTF-8"` `pageEncoding=``"UTF-8"``%>`




`<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "[http://www.w3.org/TR/html4/loose.dtd](http://www.w3.org/TR/html4/loose.dtd)">`




`<``html``>`




`<``head``>`




`<``meta` `http-equiv``=``"Content-Type"` `content``=``"text/html; charset=UTF-8"``>`




`<``title``>war test for ant</``title``>`




`</``head``>`




`<``body``>`




`      ``Hello JSP!Hello Ant!`




`</``body``>`




`</``html``>`

















接下来编写 build.xml 文件，其内容如下:











[?](http://www.cnblogs.com/philander/articles/1782254.html#)













1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28









`<?``xml` `version``=``"1.0"` `encoding``=``"UTF-8"` `?>`




`<``project` `name` `=``"WebTest"` `default` `=``"war"` `basedir` `=``"."``>`




`    ``<``property`  `name` `=``"classes"` `value` `=``"${basedir}/build/classes"``/>`




`    ``<``property`  `name` `=``"build"` `value` `=``"${basedir}/build"``/>`




`    ``<``property`  `name` `=``"lib"` `value` `=``"${basedir}/WebContent/WEB-INF/lib"``/>`




`     ``<!--  删除build 路径-->`




`    ``<``target`  `name` `=``"clean"``>`




`        ``<``delete` `dir` `=``"${build}"``/>`




`    ``</``target``>`







`     ``<!--  建立build/classes 路径，并编译class 文件到build/classes 路径下-->`




`     ``<``target` `name` `=``"compile"`  `depends` `=``"clean"``>`




`        ``<``mkdir` `dir` `=``"${classes}"``/>`




`        ``<``javac` `srcdir` `=``"${basedir}/src"`  `destdir` `=``"${classes}"``/>`




`     ``</``target``>`







`     ``<!--  打war 包-->`




`     ``<``target` `name` `=``"war"` `depends` `=``"compile"``>`




`            ``<``war` `destfile` `=``"${build}/WebTest.war"`  `webxml` `=``"${basedir}/WebContent/WEB-INF/web.xml"``>`




`            ``<!--  拷贝WebRoot 下除了WEB-INF 和META-INF 的两个文件夹-->`




`             ``<``fileset` `dir` `=``"${basedir}/WebContent"`  `includes` `=``"**/*.jsp"``/>`




`            ``<!--  拷贝lib 目录下的jar 包-->`




`            ``<``lib` `dir` `=``"${lib}"``/>`




`            ``<!--  拷贝build/classes 下的class 文件-->`




`            ``<``classes` `dir` `=``"${classes}"``/>`




`        ``</``war``>`




`     ``</``target``>`




`</``project``>`

















在C:\ThinkInJavaCode\WebTest目录下运行ant后，就生成了WebTest.war 文件了，然后可以将其放入Web容器(如Tomcat)的相应目录下(${Tomcata安装目录}\webapps)运行该web项目了。



