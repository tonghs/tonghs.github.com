---
author: ths
comments: true
date: 2010-12-06 14:36:39+00:00
layout: post
slug: c%e9%94%ae%e7%9b%98%e9%bc%a0%e6%a0%87%e8%ae%b0%e5%bd%95%e7%9b%b8%e5%85%b3
title: C#键盘鼠标记录相关
wordpress_id: 240
categories:
- 技术
tags:
- 鼠标键盘记录
---

using  System;    

     using  System.Runtime.InteropServices;    

     using  System.Reflection;    

     using  System.Threading;    

     using  System.Windows.Forms;    

     using  System.IO;    

     using  System.Timers;    

     namespace  HookGlobal    

     {    

       

     ///  <summary>   

     ///  这个类可以让你得到一个在运行中程序的所有鼠标事件    

     ///  并且引发一个带MouseEventArgs参数的.NET鼠标事件以便你很容易使用这些信息   

     ///  </summary>   

     ///    

       

     public  class  LoadMouseHook    

     {    

     //该函数用于执行鼠标按键消息！    

     [DllImport("user32.dll",  EntryPoint="mouse_event")]    

     public  static  extern  void  mouse_event  (    

     int  dwFlags,    

     int  dx,    

     int  dy,    

     int  cButtons,    

     int  dwExtraInfo    

     );    

       

     //该函数用于执行鼠标定位    

     [DllImport("user32.dll" ,  EntryPoint="SetCursorPos")]　    

     　  public  extern  static  int  SetCursorPos  (  int  x  ,  int  y  );    

       

     //鼠标消息数组    

     string[,]  actions;    

       

     //自定义TIMER事件    

     System.Timers.Timer  tmr;    

       

     //时间执行位子标记    

     int  actionflag=0;    

       

     //默认事件文件    

     public  const  string  RecordFile="MouseRecorder.mrd";    

       

     //默认执行速度    

     public  const  int  runspeed=30;    

       

     //    

     private  int  interval;    

       

     public  LoadMouseHook(string  fname,int  mSpeed)    

     {    

     ActionInitialize(fname,mSpeed);    

     }    

       

     public  LoadMouseHook(string  fname)    

     {    

     ActionInitialize(fname,runspeed);    

     }    

       

     public  LoadMouseHook()    

     {    

     ActionInitialize(RecordFile,runspeed);    

     }    

       

     //初始化鼠标消息数组  actions    

     public  void  ActionInitialize(string  fname,int  mSpeed)    

     {    

     actionflag=0;    

     StreamReader  sr=new  StreamReader(fname);    

     string  Filetxt=sr.ReadToEnd();    

     sr.Close();    

     string[]  txtarr=Filetxt.Split('n');    

     string[]  linearr;    

     actions=new  string[txtarr.Length,4];    

     for(int  i=0;i<txtarr.Length;i++)    

     {    

     linearr=txtarr[i].Split(',');    

     for  (int  j=0;j<linearr.Length;j++)    

     {    

     actions[i,j]=linearr[j];    

     }    

     }    

       

     //添加TIMER事件，执行鼠标消息。    

     tmr=new  System.Timers.Timer(mSpeed);    

     tmr.Elapsed+=new  System.Timers.ElapsedEventHandler(this.RunActions);    

     }    

       

     //开始执行事件    

     public  void  StartAction()    

     {    

     tmr.Enabled=true;    

     }    

       

     //停止执行事件    

     public  void  StopAction()    

     {    

     tmr.Elapsed-=new  System.Timers.ElapsedEventHandler(this.RunActions);    

     tmr.Enabled=false;    

     }    

       

     //时间执行过程。    

     public  void  RunActions(object  sender,  System.Timers.ElapsedEventArgs  e)    

     {    

       

     //将鼠标定位到指定位置    

     SetCursorPos(int.Parse(actions[actionflag,1]),int.Parse(actions[actionflag,2]));    

     //如果鼠标执行了其他时间（比如按下，弹起等），就调用mouse_event函数执行相应的操作。    

     if  (actions[actionflag,3]!=null)    

     {    

     switch(int.Parse(actions[actionflag,3])-512)    

     {    

     case  1://鼠标左键按下    

     mouse_event(2,0,0,0,0);    

     break;    

     case  2://鼠标左键弹起    

     mouse_event(4,0,0,0,0);    

     break;    

     case  4://鼠标右键按下    

     mouse_event(8,0,0,0,0);    

     break;    

     case  5://鼠标右键弹起    

     mouse_event(16,0,0,0,0);    

     break;    

     }    

       

     }    

       

     if  (actionflag<actions.Length)    

     {    

     actionflag++;    

     }    

     else    

     {    

       

     actionflag=0;    

     tmr.Elapsed-=new  System.Timers.ElapsedEventHandler(this.RunActions);    

     tmr.Enabled=false;    

     }    

       

       

     }    

       

     }    

       

     public  class  MouseHook    

     {    

     private  const  int  WM_MOUSEMOVE  =  0x200;    

     private  const  int  WM_LBUTTONDOWN  =  0x201;    

     private  const  int  WM_RBUTTONDOWN  =  0x204;    

     private  const  int  WM_MBUTTONDOWN  =  0x207;    

     private  const  int  WM_LBUTTONUP  =  0x202;    

     private  const  int  WM_RBUTTONUP  =  0x205;    

     private  const  int  WM_MBUTTONUP  =  0x208;    

     private  const  int  WM_LBUTTONDBLCLK  =  0x203;    

     private  const  int  WM_RBUTTONDBLCLK  =  0x206;    

     private  const  int  WM_MBUTTONDBLCLK  =  0x209;    

       

     static  int  hMouseHook  =  0;  //鼠标钩子句柄    

       

     //鼠标常量    

     public  const  int  WH_MOUSE_LL  =  14; //mouse  hook  constant    

       

     HookProc  MouseHookProcedure;  //声明鼠标钩子事件类型.    

       

     //默认事件文件    

     public  const  string  RecordFile="MouseRecorder.mrd";    

       

     //声明一个Point的封送类型    

     [StructLayout(LayoutKind.Sequential)]    

     public  class  POINT    

     {    

     public  int  x;    

     public  int  y;    

     }    

       

     //声明鼠标钩子的封送结构类型    

     [StructLayout(LayoutKind.Sequential)]    

     public  class  MouseHookStruct    

     {    

     public  POINT  pt;    

     public  int  hWnd;    

     public  int  wHitTestCode;    

     public  int  dwExtraInfo;    

     }    

       

     //装置钩子的函数    

     [DllImport("user32.dll",CharSet=CharSet.Auto,  CallingConvention=CallingConvention.StdCall)]    

     public  static  extern  int  SetWindowsHookEx(int  idHook,  HookProc  lpfn,  IntPtr  hInstance,  int  threadId);    

       

     //卸下钩子的函数    

     [DllImport("user32.dll",CharSet=CharSet.Auto,  CallingConvention=CallingConvention.StdCall)]    

     public  static  extern  bool  UnhookWindowsHookEx(int  idHook);    

       

     //下一个钩挂的函数    

     [DllImport("user32.dll",CharSet=CharSet.Auto,  CallingConvention=CallingConvention.StdCall)]    

     public  static  extern  int  CallNextHookEx(int  idHook,  int  nCode,  Int32  wParam,  IntPtr  lParam);    

       

     public  delegate  int  HookProc(int  nCode,  Int32  wParam,  IntPtr  lParam);    

       

     ///  <summary>   

     ///  墨认的构造函数构造当前类的实例.    

     ///  </summary>   

     public  MouseHook()    

     {    

     //Start();    

     }    

       

     //析构函数.    

     ~MouseHook()    

     {    

     Stop();    

     }    

       

     public  void  Start()    

     {    

     //安装鼠标钩子    

     if(hMouseHook  ==  0)    

     {    

     //生成一个HookProc的实例.    

     MouseHookProcedure  =  new  HookProc(MouseHookProc);    

       

     hMouseHook  =  SetWindowsHookEx(  WH_MOUSE_LL,  MouseHookProcedure,  Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]),  0);    

       

     //如果装置失败停止钩子    

     if(hMouseHook  ==  0  )    

     {    

     Stop();    

     throw  new  Exception("SetWindowsHookEx  failed.");    

     }    

     }    

     }    

       

     public  void  Stop()    

     {    

     bool  retMouse  =true;    

     if(hMouseHook  !=  0)    

     {    

     retMouse  =  UnhookWindowsHookEx(hMouseHook);    

     hMouseHook  =  0;    

     }    

       

     //如果卸下钩子失败    

     if  (!(retMouse))  throw  new  Exception("UnhookWindowsHookEx  failed.");    

     }    

       

     private  int  MouseHookProc(int  nCode,  Int32  wParam,  IntPtr  lParam)    

     {    

       

     //如果正常运行并且用户要监听鼠标的消息    

     MouseHookStruct  MyMouseHookStruct  =  (MouseHookStruct)  Marshal.PtrToStructure(lParam,  typeof(MouseHookStruct));    

       

     int  mousestate=wParam;    

     //将鼠标事件保存到文件，格式为  [时间,x,y,鼠标状态]。    

     StreamWriter  sw;    

     if  (!File.Exists(RecordFile))    

     sw  =  new  StreamWriter(RecordFile);    

     else    

     sw=  File.AppendText(RecordFile);    

     sw.Write(DateTime.Now.ToShortTimeString()+",");    

     sw.Write(MyMouseHookStruct.pt.x.ToString());    

     sw.Write(",");    

     sw.Write(MyMouseHookStruct.pt.y.ToString());    

     if  (mousestate!=WM_MOUSEMOVE)    

     sw.Write(","+mousestate.ToString());    

     sw.WriteLine("");    

     sw.Close();    

     return  CallNextHookEx(hMouseHook,  nCode,  wParam,  lParam);    

     }    

     }    

     }

















用C#捕捉键盘和鼠标  

    直接把下面代码copy到VS05编译器中运行.  

    using System ;   

    using System.Drawing ;   

    using System.Collections ;   

    using System.ComponentModel ;   

    using System.Windows.Forms ;   

    using System.Data ;  

    public class Form1 : Form  

    {  

     private Label label1;  

     private System.ComponentModel.Container components = null;





public Form1()  

     {  

     //初始化窗体中的各个组件   

     InitializeComponent();  

     }  

     protected override void Dispose(bool disposing)  

     {  

     //清除程序中使用过的资源   

     if (disposing)  

     {  

     if (components != null)  

     {  

     components.





Dispose();  

     }  

     }  

     base.Dispose(disposing);  

     }  

     private void InitializeComponent()  

     {  

     this.label1 = new System.Windows.Forms.Label();  

     this.SuspendLayout();  

     //   

     // label1  

     //   

     this.label1.AutoSize = true;  

     this.label1.Location = new System.Drawing.Point(145, 71);  

     this.label1.Name = "label1";  

     this.label1.Size = new System.Drawing.Size(119, 12);  

     this.label1.TabIndex = 0;  

     this.label1.Text = "按回车建.可直接退出";  

     //   

     // Form1  

     //   

     this.AutoScaleBaseSize = new System.Drawing.Size(6, 14);  

     this.ClientSize = new System.Drawing.Size(565, 273);  

     this.Controls.Add(this.label1);  

     this.KeyPreview = true;  

     this.Name = "Form1";  

     this.Text = "C#捕捉键盘和鼠标 By感觉De味道";  

     this.KeyUp += new System.Windows.Forms.KeyEventHandler(this.Form1_KeyUp);  

     this.MouseMove += new System.Windows.Forms.MouseEventHandler(this.Form1_MouseMove);  

     this.MouseDown += new System.Windows.Forms.MouseEventHandler(this.Form1_MouseDown);  

     this.Load += new System.EventHandler(this.Form1_Load);  

     this.ResumeLayout(false);  

     this.PerformLayout();





}  

     //程序开始.  

     static void Main()  

     {  

     Application.Run(new Form1());  

     }





private void Form1_KeyUp(object sender, KeyEventArgs e)  

     {  

     MessageBox.Show(e.KeyCode.ToString(), "您所按动的健为：");





switch (e.KeyCode)  

     {  

     case Keys.A: System.Diagnostics.Process.Start(@"D:StormIIStorm.exe"); break;  

       

     case Keys.Enter: this.Close(); break;//回车退出程序.





// default: MessageBox.Show("BEY"); break;  

     }  

     }





private void Form1_Load(object sender, EventArgs e)  

     {  

       

     }





private void Form1_MouseDown ( object sender , MouseEventArgs e )   

    {





if ( e.Button == MouseButtons.Left )   

    {   

    MessageBox.Show ( "按动鼠标左键！" ) ;  

    }   

    if ( e.Button == MouseButtons.Middle )   

    {   

    MessageBox.Show ( "按动鼠标中键！") ;   

    }   

    if ( e.Button == MouseButtons.Right )   

    {   

    MessageBox.Show ( "按动鼠标右键！") ;   

    }   

    }  

    //获取当前鼠标的位置.  

     private void Form1_MouseMove(object sender, MouseEventArgs e)  

     {  

     this.Text = "当前鼠标的位置为：( " + e.X + " , " + e.Y + ") By感觉De味道";   

     }





private void button1_Click_1(object sender, EventArgs e)  

     {





}





}



