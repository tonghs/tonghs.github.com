---
author: ths
comments: false
date: 2011-10-08 06:52:00+00:00
layout: post
slug: caml%e8%af%ad%e6%b3%95
title: CAML语法
wordpress_id: 680
categories:
- 技术
tags:
- CAML
---

<





p>1.Geq(>=)  
The Gq element is an arithmetic operator that means "greater than or equal to." It can be used within a Where element in a view definition.  
<Query>  
<Where>  
<Or>  
<IsNull>  
<FieldRef Name="Expires" />  
</IsNull>  
<Geq>  
<FieldRef Name="Expires" />  
<Value Type="DateTime">  
<Today />  
</Value>  
</Geq>  
</Or>  
</Where>  
<OrderBy>  
<FieldRef Name="Modified" Ascending="FALSE" />  
</OrderBy>  
</Query>  
2.Eq(=)  
The Eq element is an arithmetic operator that means "equal to" and is used within the Query element.  
<Query>  
<OrderBy>  
<FieldRef Name="Modified" Ascending="FALSE"></FieldRef>  
</OrderBy>  
<Where>  
<Or>  
<Eq>  
<FieldRef Name="Status"></FieldRef>  
<Value Type="Text">Completed</Value>  
</Eq>  
<IsNull>  
<FieldRef Name="Status"></FieldRef>  
</IsNull>  
</Or>  
</Where>  
</Query>  
3.Gt(>)  
The Gt element is an arithmetic operator that means "greater than." This element is used similarly to Eq and Lt.  
<Query>  
<Where>  
<Or>  
<IsNull>  
<FieldRef Name="Deadline" />  
</IsNull>  
<Gt>  
<FieldRef Name="Deadline" />  
<Value Type="DateTime">  
<Today />  
</Value>  
</Gt>  
</Or>  
</Where>  
<OrderBy>  
<FieldRef Name="Modified" Ascending="FALSE" />  
</OrderBy>  
</Query>  
4.Lt(<)  
The Lt element is an arithmetic operator that means "less than" and is used in queries in views. This element is used similarly to Eq and Gt.  
<Query>  
<Where>  
<Or>  
<IsNull>  
<FieldRef Name="Deadline" />  
</IsNull>  
<Lt>  
<FieldRef Name="Deadline" />  
<Value Type="DateTime">  
<Today />  
</Value>  
</Lt>  
</Or>  
</Where>  
<OrderBy>  
<FieldRef Name="Modified" Ascending="FALSE" />  
</OrderBy>  
</Query>  
5.Neq(!=)  
The Neq element is an arithmetic operator that means "not equal to" and is used in queries.  
<Query>  
<OrderBy>  
<FieldRef Name="Modified" Ascending="FALSE"></FieldRef>  
</OrderBy>  
<Where>  
<Or>  
<Neq>  
<FieldRef Name="Status"></FieldRef>  
<Value Type="Text">Completed</Value>  
</Neq>  
<IsNull>  
<FieldRef Name="Status"></FieldRef>  
</IsNull>  
</Or>  
</Where>  
</Query>





<





p>SPQuery 的Where 子句的用法





<





p>1、一个条件实例





<





p><Where> <Or> <Eq><FieldRef Name='Name'/>





<





p><Value Type='Text'>Mark</Value></Eq> <Eq><FieldRef





<





p>Name='Name'/><Value Type='Text'>Joe</Value></Eq> </Or>





<





p></Where>





<





p>2、两个条件实例





<





p><Where> <Or> <Eq><FieldRef Name='Name'/>





<





p><Value Type='Text'>Mark</Value></Eq> <Or> <Eq>





<





p><FieldRef Name='Name'/><Value Type='Text'>Joe</Value></Eq>





<





p><Eq><FieldRef Name='Name'/><Value Type='Text'>Linda</Value></Eq>





<





p></Or> </Or> </Where>





<





p>3、三个条件实例





<





p><Where> <Or> <Eq><FieldRef Name='Name'/>





<





p><Value Type='Text'>Mark</Value></Eq> <Or> <Eq>





<





p><FieldRef Name='Name'/><Value Type='Text'>Joe</Value></Eq>





<





p><Eq><FieldRef Name='Name'/><Value Type='Text'>Linda</Value></Eq>





<





p></Or> </Or> </Where>





<





p>下表是CAML查询的一些简单说明：





<





p>元素  
说明  
And  
并且  
BeginsWith  
以某字符串开始的  
Contains  
包含某字符串  
Eq  
等于  
FieldRef  
一个字段的引用 (在GroupBy 中使用)  
Geq  
大于等于  
GroupBy  
分组  
Gt  
大于  
IsNotNull  
非空  
IsNull  
空  
Leq  
小于等于  
Lt  
小于  
Neq  
不等于  
Now  
当前时间  
Or  
或  
OrderBy  
排序  
Today  
今天的日期  
TodayIso  
今天的日期（ISO格式）  
Where  
Where子句





<





p>简介





<





p>协作应用程序标记语言 (CAML) 的 View 元素提供一个在 Microsoft SharePoint? Team Services 的数据库中执行查询和返回值的灵活方法。此元素适应对自定义 SharePoint Team Web 站点的广泛需求，从执行查询以便将数据返回到脚本进行处理，到布置页面部分中列表数据的显示。





<





p>要点 您必须具有写页面权限，才能上载页面。您必须以本地 Administrators 组成员的身份登录到服务器计算机，才能写入数据库。





<





p>根据您的目的是返回并显示值，还是仅返回值以便在脚本中进行处理，Web 站点的 Default.htm 页或任何列表的 AllItems.htm 页上的列表视图典型方案包含下列子元素。





<





p>Query 如果您只希望在一个列表中返回所有值，则该子元素可以为空。  
ViewBody 可以使用 ViewBody 子元素（带有或不带 ViewHeader 和 ViewFooter 元素）来布置用于显示数据的视图表。  
ViewEmpty ViewEmpty 子元素指定当查询未返回任何数据时所显示的内容。它还为执行替代视图提供了有用的制约性，以防查询中不返回任何项目。请参见下面的示例。  
ViewFields 当视图不用于显示项目，只用于返回值进行处理时，ViewFields 子元素可以为空。  
RowLimit RowLimit 子元素指定要在当前窗口中显示的项目数。  
PagedRowset 当 RowLimit 元素包含的值超出时，PagedRowset 子元素将为下一个窗口定义一个视图。  
Toolbar 在 AllItems.htm 页上，Toolbar 子元素定义紧靠列表视图之上的页中显示的按钮和部分行。  
CAML HTML 元素与 CDATA 标记共同用来在视图中嵌入标记语言或脚本（例如 <HTML><![CDATA[<TABLE><TR><TH>]]></HTML>）。





<





p>要点 为了完成下述任务，您必须具有写页面权限才能上载页面。您必须以本地 Administrators 组成员的身份登录到计算机，才能写入数据库。





<





p>假设您具有 SharePoint Team Services 数据库的访问权，则可以通过从 Views 表的 View 列复制视图方案来学习和自定义视图。如果有许多视图，您可以通过要修改 ListView 组件的全局统一标识符 (GUID) 来标识相应的数据库记录。在其他情况下（例如在表单中），您可能需要引用 Lists 表（列表的列表）中 ID、Name 或 Title 列值的组合。然后，您可以使用其视图方案替换整个组件，并使用以下 CAML 包围已复制的视图：





<





p><ows:XML>





<





p><SetList>[u_YourCustomListName[without "u_" for native lists]]</SetList>





<





p><View>





<





p> .





<





p> .





<





p> .





<





p> [Copied view schema goes here]





<





p> .





<





p> .





<





p> .





<





p></View>





<





p></ows:XML>





<





p>在 Microsoft FrontPage 中，您可以选择一个视图，右键单击此视图，然后单击 Layout Customization 以展开视图方案并进行自定义。





<





p>注 应始终保存原始站点页面的副本，以便可以在需要时复原组件。





<





p>返回页首





<





p>创建基本列表视图





<





p>下例布置了用于显示自定义列表 (u_MyCustomList) 的视图表。ViewFields 元素指定要在视图页眉中显示的 Title、Stock 和 Price 字段名称以及视图正文中显示的这些字段的值。





<





p><ows:XML>





<





p><SetList>[u_MyCustomList]</SetList>





<





p><View Name="MyNewView">





<





p> <ViewFields>





<





p> <FieldRef Name="Title"/>





<





p> <FieldRef Name="Stock"/>





<





p> <FieldRef Name="Price"/>





<





p> </ViewFields>





<





p>ViewHeader 元素包含 Fields 和 Field 元素，这些元素枚举了 ViewFields 元素所指定的字段名称。HTML 元素包含用于显示表格标题的标记语言，这取决于 Web 或子站点的 /_layouts/styles/ows.css 文件中定义的 ms-vh 样式。





<





p> <ViewHeader>





<





p> <HTML><![CDATA[<TABLE><TR class="ms-vh">]]></HTML>





<





p> <Fields>





<





p> <HTML><![CDATA[<TH>]]></HTML>





<





p> <Field/>





<





p> <HTML><![CDATA[</TH>]]></HTML>





<





p> </Fields>





<





p> <HTML><![CDATA[</TR>]]></HTML>





<





p> </ViewHeader>





<





p>ViewBody 元素包含为列表中的每个项目枚举字段值的 Fields 和 Field 元素。HTML 元素包含用于在表格单元格中显示这些值的标记语言，这取决于 Web 或子站点的 /_layouts/styles/ows.css 文件中定义的 ms-vb 样式。





<





p> <ViewBody>





<





p> <HTML><![CDATA[<TR class="ms-vb">]]></HTML>





<





p> <Fields>





<





p> <HTML><![CDATA[<TD>]]></HTML>





<





p> <Field/>





<





p> <HTML><![CDATA[</TD>]]></HTML>





<





p> </Fields>





<





p> <HTML><![CDATA[</TR>]]></HTML>





<





p> </ViewBody>





<





p> <ViewFooter>





<





p> <HTML><![CDATA[</TABLE>]]></HTML>





<





p> </ViewFooter>





<





p>Query 部分查询股票小于 15 或价格大于 20.00 的情况。





<





p> <Query>





<





p> <Where>





<





p> <Or>





<





p> <Lt>





<





p> <FieldRef Name="Stock"/>





<





p> <Value Type="Number">





<





p> 15





<





p> </Value>





<





p> </Lt>





<





p> <Gt>





<





p> <FieldRef Name="Price"/>





<





p> <Value Type="Currency">





<





p> 20.00





<





p> </Value>





<





p> </Gt>





<





p> </Or>





<





p> </Where>





<





p> <OrderBy>





<





p> <FieldRef Name="Title"/>





<





p> </OrderBy>





<





p> </Query>





<





p></View>





<





p></ows:XML>





<





p>为了返回指定字段的所有值，您可以转而使用空的 Query 元素 ()。





<





p>返回页首





<





p>在脚本中使用视图





<





p>下例说明了如何使用 CAML 视图返回项目 ID 并将它们指定给数组，以便在脚本中进行处理。此视图返回事件日期晚于 1/1/2002 的以逗号分隔的项目 ID 列表。这些项目 ID 被指定给 strIDs 变量，然后逐一显示在消息框中。





<





p><Script language="JavaScript">





<





p>function getIDs()





<





p>{





<





p> var arrIDs = new Array();





<





p> var strIDs="<ows:XML>





<





p> <SetList>Events</SetList>





<





p> <View>





<





p> <ViewFields>





<





p> <FieldRef Name="ID"/>





<





p> </ViewFields>





<





p> <ViewBody>





<





p> <Fields>





<





p> <Field/>





<





p> <HTML><![CDATA[,]]></HTML>





<





p> </Fields>





<





p> </ViewBody>





<





p> <Query>





<





p> <Where>





<





p> <Gt>





<





p> <FieldRef Name="EventDate"/>





<





p> <Value Type="DateTime">2002-01-01T00:00:00Z</Value>





<





p> </Gt>





<





p> </Where>





<





p> </Query>





<





p> </View>





<





p> </ows:XML>";





<





p> arrIDs=strIDs.split(/,/);





<





p> alert(arrIDs);





<





p>}





<





p></Script>





<





p>注 如果您要在 CAML 视图中动态插入用户输入的数据，而不只是像上例中那样对值进行硬编码，则需要从解释器掩盖 CAML，以防止立即处理该视图。有关详细信息，请参阅使用 XMLHTTP 在 SharePoint Team Services 中发布命令。





<





p>返回页首





<





p>添加个性化消息





<





p>为了获得当前用户的名称并显示个性化消息，以下代码示例针对 UserInfo 表执行查询，此表是数据库中的全局列表，该数据库包含虚拟服务器上所有小组 Web 站点的所有用户信息。





<





p><ows:XML>





<





p><SetList>UserInfo</SetList>





<





p><View>





<





p> <ViewFields>





<





p> <FieldRef Name="Title"/>





<





p> </ViewFields>





<





p> <Query>





<





p> <Where>





<





p> <Eq>





<





p> <FieldRef Name="ID"/>





<





p> <Value Type="Integer"><UserID/></Value>





<





p> </Eq>





<





p> </Where>





<





p> </Query>





<





p> <ViewBody>





<





p> <HTML>





<





p> <![CDATA[<TABLE><TR><TD class="Greeting">Hello ]]>





<





p> </HTML>





<





p> <Field Name="Title"/>





<





p> <HTML>





<





p> <![CDATA[, welcome to the team Web site.</TD></TR></TABLE>]]>





<





p> </HTML>





<





p> </ViewBody>





<





p></View>





<





p></ows:XML>





<





p>此示例查询当前用户的 ID 与 UserInfo 表中的 ID 相匹配的情况，并按 ViewFields 元素的指定显示对应的 Title 字段值（在此例中为用户名）。CDATA 部分布置用于对齐页面上个性化问候的简单表。请注意，为了设置格式，可将自定义样式定义添加到 ows.css 并在 HTML 及其元素中实现。





<





p>返回页首





<





p>列出服务器上的所有子站点





<





p>下例显示如何通过创建数据库中 Projects 表的视图来创建返回服务器上所有子站点链接列表的视图：





<





p><ows:XML>





<





p><SetList>Projects</SetList>





<





p><View Name="ProjectsView">





<





p> <ViewFields>





<





p> <FieldRef Name="Title"/>





<





p> <FieldRef Name="HomePageID" Explicit="TRUE"/>





<





p> </ViewFields>





<





p> <ViewHeader>





<





p> <HTML><![CDATA[<TABLE>]]></HTML>





<





p> </ViewHeader>





<





p> <ViewBody>





<





p> <HTML><![CDATA[<TR><TD>]]></HTML>





<





p> <HTML><![CDATA[<a target="_blank" href="]]></HTML>





<





p> <LookupColumn Name="HomePageID"/>





<





p> <HTML><![CDATA[">]]></HTML>





<





p> <Field Name="Title"/>





<





p> <HTML><![CDATA[</a></TD></TR>]]></HTML>





<





p> </ViewBody>





<





p> <ViewFooter>





<





p> <HTML><![CDATA[</TABLE>]]></HTML>





<





p> </ViewFooter>





<





p></View>





<





p></ows:XML>





<





p>HomePageID 字段是 DocMd 表（该表存储服务器上的所有 URL）的查找字段。此处，HTML target 属性设置为 _blank，以便当用户单击子站点链接时，该子站点会显示在新窗口中。





<





p>返回页首





<





p>预填充输入框





<





p>要使用当前用户的名称和电子邮件地址来预填充表单，您可以创建一个返回此用户名的视图，然后将其指定给一个变量。使用 GetEmailFromUser 元素返回当前用户的电子邮件地址。





<





p>首先，添加一个 CAML 岛，它将此视图定义给包含该表单的页面（为了适应 MSDN Web 布局的需要，此代码示例已经“被截断”）：





<





p><ows:XML>





<





p><SetList>UserInfo</SetList>





<





p><View>





<





p> <ViewFields>





<





p> <FieldRef Name="Name"/>





<





p> </ViewFields>





<





p> <Query>





<





p> <Where>





<





p> <Eq>





<





p> <FieldRef Name="ID"/>





<





p> <Value Type="Integer"><UserID/></Value>





<





p> </Eq>





<





p> </Where>





<





p> </Query>





<





p> <ViewBody>





<





p> <SetVar Name="UName" Scope="Request"><Field





<





p>Name="Name"/></SetVar>





<





p> </ViewBody>





<





p> </View>





<





p></ows:XML>





<





p>请注意，此视图只用于返回当前用户的名称，此名称已指定给自定义 CAML 变量 UName。然后，您可以添加两个输入框，将适当的 CAML 指定给它们的 value 属性：





<





p><input type="text" name="username" size="38" value="<ows:GetVar Name="UName"/>">





<input type="text" name="user_email" size="38" value="<ows:GetEmailFromUser HTMLEncode="TRUE"><UserID/></ows:GetEmailFromUser>">



