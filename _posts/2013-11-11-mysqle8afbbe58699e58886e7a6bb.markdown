---
author: ths
comments: true
date: 2013-11-11 13:14:45+00:00
layout: post
slug: mysql%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb
title: MySQL读写分离
wordpress_id: 1277
categories:
- 分享
- 技术
tags:
- mysql
- 读写分离
---

**本文出自 “lishiy” 博客，[http://3802230.blog.51cto.com/3792230/1001598](http://3802230.blog.51cto.com/3792230/1001598)**





在看一篇MySQL分表的技术文章的时候提到了数据库的读写分离，于是上网找了详细的实现方法，转来的，收藏先。





Mysql数据库读写分离





一、 Mysql数据库安装（此处略过）





二、 Mysql主从复制，主服务器为A：192.168.5.31，从服务器为B：192.168.5.32





1、 主服务器A上操作





登陆mysql




    
    <code>Mysql –u root –p 
    </code>





授权从服务器B同步数据用户




    
    <code>mysql> GRANT REPLICATION SLAVE ON *.* to 'slavedb'@'192.168.5.32' identified by '123456';
    </code>





查看主服务器状态,记录红色字体标示，配置从服务器备用




    
    <code>mysql> show master status;
    
    +------------------+----------+--------------+------------------+
    | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
    +------------------+----------+--------------+------------------+
    | mysql-bin.000006 |      107 |              | mysql            |
    +------------------+----------+--------------+------------------+
    </code>





修改mysql配置文件




    
    <code>vi /etc/my.cnf
    server-id = 1   #设置server-id为1,1表示为主服务器
    binlog-do-db=  #需要进行同步的数据库，全部库都同步可不填
    binlog-ignore-db=  #不需要同步的数据库
    </code>





2、 从服务器B上操作





修改mysql配置文件




    
    <code>vi /etc/my.cnf
    server-di = 2  #设置server-id为2
    binlog-do-db=  #根据需要进行设置
    binlog-ignore-db=    #根据需要进行设置
    </code>





登陆mysql




    
    <code>mysql –u root –p 
    </code>





停止slave同步




    
    <code>mysql> salve stop;
    </code>





执行数据库同步命令, master_log_file, master_log_pos选项需要根据主数据填写




    
    <code>Mysql>Change master to 
    master_host='192.168.5.31',
    master_user='slavedb',
    master_password='123456',
    master_log_file='mysql-bin.000006',
    master_log_pos=107;
    </code>





启动slave同步




    
    <code>mysql> salve start;
    </code>





查看同步状态，Slave_IO_Running，Slave_SQL_Running同时为yes表示已开启同步




    
    <code>mysql> show slave status \G
    *************************** 1. row ***************************
                   Slave_IO_State: Waiting for master to send event
                      Master_Host: 192.168.5.31
                      Master_User: slavedb
                      Master_Port: 3306
                    Connect_Retry: 60
                  Master_Log_File: mysql-bin.000006
              Read_Master_Log_Pos: 107
                   Relay_Log_File: cs2-relay-bin.000004
                    Relay_Log_Pos: 253
            Relay_Master_Log_File: mysql-bin.000006
                 Slave_IO_Running: Yes
                Slave_SQL_Running: Yes
                  Replicate_Do_DB: 
              Replicate_Ignore_DB: mysql
               Replicate_Do_Table: 
           Replicate_Ignore_Table: 
          Replicate_Wild_Do_Table: 
      Replicate_Wild_Ignore_Table:
    </code>





3、 测试主从复制





在主数据库创建数据库




    
    <code>mysql>create database db1;
    </code>





在从数据库查看数据库,显示db1复制正常




    
    <code>mysql> show databases;
    
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | db1                |
    | mysql              |
    | performance_schema |
    +--------------------+
    
    4 rows in set (0.00 sec)
    </code>





三、 配置数据库读写分离，由mysql proxy完成，主服务器A为写操作，从服务器B为读操作





1、 配置mysql proxy，根据需要下载32位或64位




    
    <code>wget http://cdn.mysql.com/Downloads/MySQL-Proxy/mysql-proxy-0.8.3-linux-glibc2.3-x86-32bit.tar.gz
    wget http://cdn.mysql.com/Downloads/MySQL-Proxy/mysql-proxy-0.8.3-linux-glibc2.3-x86-64bit.tar.gz
    </code>





解压mysql proxy




    
    <code>tar –zxvf mysql-proxy-0.8.3-linux-glibc2.3-x86-32bit.tar.gz
    cp –r mysql-proxy-0.8.3-linux-glibc2.3-x86-32bit /usr/local/mysql-proxy
    </code>





2、 创建mysql proxy配置文件，具体参数可查看/usr/local/mysql-proxy/bin/mysql-proxy –help-all




    
    <code>vi /etc/mysql-proxy.cnf    
    [mysql-proxy]
    user=root      #指定mysql-proxy运行用户
    proxy-address=192.168.5.31:4040   #mysql-proxy运行运行ip和端口号
    proxy-read-only-backend-addresses=192.168.5.32:3306  #读操作数据库地址
    proxy-backend-addresses=192.168.5.31:3306   #写操作数据库地址
    proxy-lua-script=/usr/local/mysql-proxy/scripts/rw-splitting.lua  #读写分离配置文件路径
    log-file=/usr/local/mysql-proxy/log/mysql-proxy.log  #日志文件存放路径
    log-level=debug
    daemon=true  #以守护进程方式运行
    keepalive=true   #mysql-proxy进程假死后自动重启
    </code>





3、 创建日志存放目录




    
    <code>mkdir /usr/local/mysql-proxy/log
    </code>





4、 复制读写分离配置文件




    
    <code>mkdir /usr/local/mysql-proxy/scripts
    cp /usr/local/mysql-proxy/share/doc/mysql-proxy/rw-splitting.lua /usr/local/mysql-proxy/scripts 
    </code>





5、 修改读写分离配置文件，默认达到4个连接才进行读写分离





vi /usr/local/mysql-proxy/scripts/rw-splitting.lua  

if not proxy.global.config.rwsplit then proxy.global.config.rwsplit = { min_idle_connections = 1, #默认4，改为1 max_idle_connections = 1, #默认8，改为1 is_debug = false  

}





end





6、 修改mysql-proxy.cnf权限




    
    <code>chmod 660 /etc/mysql-proxy.cnf
    </code>





7、 启动mysql proxy




    
    <code>/usr/local/mysql-proxy/bin/mysql-proxy --defaults-file=/etc/mysql-proxy.cnf
    </code>





8、 创建用于读写分离数据库连接账户 登陆主服务器，创建用户




    
    <code>mysql > GRANT ALL PRIVILEGES ON *.* TO "proxy"@"192.168.5.31" IDENTIFIED BY 'proxy' WITH GRANT OPTION;
    </code>





9、 测试读写分离 登陆从服务器B，停止数据库同步




    
    <code>mysql>slave stop;
    </code>





在客户端连接mysql proxy进行读写操作




    
    <code>mysql –u proxy –h 192.168.5.31 –p –P 4040 
    </code>





登陆后在db1中写入数据




    
    <code>mysql>use db1;
    mysql>create table tb1(id int(5),name char(10));
    mysql>insert into tb1 values (1,’abc’);
    </code>





在db1 中查询数据




    
    <code>mysql> select * from tb1;
    Empty set (0.00 sec)
    </code>





查询为空说明读写分离成功



