---
author: ths
comments: true
date: 2010-01-27 07:22:00+00:00
layout: post
slug: c%e5%b1%9e%e6%80%a7%e5%92%8c%e7%b4%a2%e5%bc%95%ef%bc%88%e8%bd%ac%ef%bc%89
title: C#属性和索引（转）
wordpress_id: 71
categories:
- 技术
tags:
- c
- it
- 索引
---





一直很搞不懂索引器，不明白有什么用，或者到底是什么东西。书上网上的解析都大同小异，而且非常抽象，用很高度概括的话来解析索引器。对于已经理解索引器
的人来说，越是精确抽象的语言越是越是能概括它，但对于一个不理解它的人来说，这样抽象的语句确实令人头疼。





经过3天的查阅资料和看代码，我视乎终于对索引器有所认识。由于我对索引器的认识过程是如此的艰难，我很能体会到一些具体，形象的解析语句对于像我这么一
个新手来说是多么的重要。




所以，我决定不用书上，网上那些权威语句来解析索引器，而是用自己很通俗的甚至是很弱智的语句来解析它。





先来看看属性，因为属性和索引器有几分相似。看过C#的书的人都发觉，属性和一个普通变量的关系。属性除了有一个get和set方法外，和一个普通的变量
几乎没有却别。但重要的差异就是因为属性有get和set方法。到底什么时候用到属性呢？当你声明了一个很重要的变量的时候，因为这个变量很重要，你不想
它很随便就可以被修改，对吧？这时，你就用"private"把它声明为私有，这样，在它的家（它所在的类）以外的地方都是不能访问它的。这里打个比喻：
一般人，他的孩子都可以自由进出自己的家，去外面玩，因此，对于其他的人家，这些孩子都是可见，可以和他玩，这些孩子就像一个类中的共有变量，这个类就是
它的家，其他的类可以访问这个变量，就像其他的人家可以接触其他人家的孩子一样。但假如有一个家庭的孩子是很重要的人物，他的父母不允许他离开房子，把他
关在房子里，这样就可以避免别人接触到这个重要的小孩，甚至绑架他。所以，这个孩子对于其他家庭的人是不可见的，其他家庭的人不能接触到这个孩子，不能和
他玩，只有这个孩子的家人（他父母，兄弟姊妹）能接触他。那么这个孩子就是这个重要的私有变量。但一个孩子一生总是被关在房子里肯定是没有意义的，他也要
和房子以外有联系，这时候，他父母就买给他一部电脑，他可以上QQ，上网和外界联系，只是外界不能直接地接触他而已。C#中也是一样，一个私有变量，他要
和外界联系，必须通过属性（具体就是通过属性的GET和SET方法）。





那么到底set和get是怎样工作的呢？来举例：假如你声明了一个私有变量“even”,专门用来接收偶数。那么你对它赋值时候就要判断这个值是否是偶
数，假如为偶数，就不能将它赋给even，但具体语句怎样实现？因为even是私有变量，类外不能访问它，而且判断基偶的语句也不好写。这时候，属性就有
出现的意义了：定义一个共有的属性Even（even与Even不同，c#区分大小写），属性本身有get和set属性。来看代码：




private int even;




public int Even{




set{




if(value%2==0) even=value;




}





其中，value也是属性中一个固有的变量，用来接收要赋给这个属性的值。这样，通过set方法，就可以判断要赋的值是否是偶数了，如果是偶
数，Even就接受这个值，并将这个值赋给even。





所以，属性是外界访问对应的私有变量的一个桥梁，属性中的get和set就是为这个访问而设计的“安全门”：合格者才能访问这个私有变量。




get是返回even的值，而set是写入even的值，但出现 int
a=Even的时候，Even的get就发挥作用，返回even的值，并赋给a，当出现
Even=20时候，set就发挥作用：Even接收值20，并通过set判断20是否是偶数，是则赋给even。




终于说到了索引器这份了（只说索引器的用途，“创建索引器的格式”这类的问题省略）。





假如有一个类studentName，类中有一个私有数组names记录着全校5000个学生名字，现在要在其他类中执行"按顺序打印学生姓名"的
操作，该怎样写代码？你肯定很想定义像属性一样东西，同时这个东西又要具有数组的特性（能通过for循环来逐个访问它的元素），对吧？这时候，索引就出现
了！使用索引，你可以先创建一个studentName的对象theName，而且theName[i]代表着对应的names[i]，神奇吧？




看完整代码（为方便，我假设全学校只有4个人）：




using System;  

public class studentName  

{  

    private
string[] names = new string[4] { "tom", "jack", "mike", "kate"
};  

    public
string this[int index] //创建一个索引器  

    {  

       
get  

       
{  

           
return names[index];  

       
}  

    }  

}  

public class Demo  

{  

    public
static void Main()  

    {  

       
studentName theName = new studentName();  

       
for (int i = 0; i < 4; i++)  

       
{  

           
Console.WriteLine(theName[i]);  

       
}  

    }  

}




这样就可以打印出姓名名单。





这就是索引器的作用。无论书上，网上都说索引器跟属性很相似，事实上真的是这样，所以，你甚至可以定义一个数组形式的属性去代替索引器来实现上面的
功能，只不过有些情况下索引器比属性更方便。






